[{"path": "./Dataset/funcom_test/6528540.txt", "code": "public void checkIn(Content content)  throws CMSRuntimeException{\n        try {\n            Node n = JCRUtil.getNodeById(content.getId());\n            n.checkin();\n        } catch (RepositoryException e) {\n            String errorMessage = \"Error checking-in node: \";\n            log.error(errorMessage, e);\n            throw new CMSRuntimeException(errorMessage, e);\n        }\n    }", "comment": "creates a new version of the content"}, {"path": "./Dataset/funcom_test/19507064.txt", "code": "public void testCreateNewChildRoot() throws Exception {\n\t\tcheckEmpty(root);\n\t\tfinal NamedElement e1 = createNewNEPositive(root, null);\n\t\tcheckEmptyChildren(root, e1);\n\t\tfinal NamedElement e3 = createNewNEPositive(root, null);\n\t\tcheckEmptyChildren(root, e1, e3);\n\t\tfinal NamedElement e0 = createNewNEPositive(root, e1);\n\t\tcheckEmptyChildren(root, e0, e1, e3);\n\t\tfinal NamedElement e2 = createNewNEPositive(root, e3);\n\t\tcheckEmptyChildren(root, e0, e1, e2, e3);\n\t}", "comment": "ensures that creating a new child of a root element works as advertised"}, {"path": "./Dataset/funcom_test/45048592.txt", "code": "protected String readFile(File f) {\n\t\tString record = null, fileContents = \"\";\n\t\ttry {\n\t\t\tFileReader fr = new FileReader(f);\n\t\t\tBufferedReader br = new BufferedReader(fr);\n\t\t\trecord = new String();\n\t\t\twhile ((record = br.readLine()) != null) {\n\t\t\t\tfileContents += record + \"\\n\";\n\t\t\t}\n\t\t\tif (fileContents.indexOf('\\\\') != -1)\n\t\t\t\tfileContents = fileContents.replace('\\\\', '/');\n\n\t\t\tfr.close();\n\t\t\tbr.close();\n\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn fileContents;\n\t}", "comment": "read the file f"}, {"path": "./Dataset/funcom_test/47661199.txt", "code": "protected void addCodePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_AssociationTransformationCode_code_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_AssociationTransformationCode_code_feature\", \"_UI_AssociationTransformationCode_type\"),\n\t\t\t\t WorkspacePackage.Literals.ASSOCIATION_TRANSFORMATION_CODE__CODE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the code feature"}, {"path": "./Dataset/funcom_test/20787135.txt", "code": "public void addAll(List<Gesture<?>> samples) {\n      for (Gesture<?> sample : samples) {\n         add(sample);\n      }\n\n      for (Gesture< ? > sample : samples) {\n         propertyChangeSupport.fireIndexedPropertyChange(PROPERTY_TEST_CLASSES,\n               samples.indexOf(sample), null, sample);\n      }\n\n   } // addAll", "comment": "adds a list of samples"}, {"path": "./Dataset/funcom_test/4453454.txt", "code": "public void restore(Component root, String fileName) throws IOException {\n\tcheckSaveRestoreArgs(root, fileName);\n\tLocalStorage lst = getContext().getLocalStorage();\n\tMap<String, Object> stateMap = (Map<String, Object>)(lst.load(fileName));\n\tif (stateMap != null) {\n\t    restoreTree(Collections.singletonList(root), stateMap);\n\t}\n    }", "comment": "restores each named component in the specified hierarchy"}, {"path": "./Dataset/funcom_test/33719159.txt", "code": "public void testSetGroupEventList() {\n        System.out.println(\"SetGroupEventList\");\n        \n        TreeSet gel = null;\n        AutismGroup instance = new AutismGroup();\n        \n        instance.SetGroupEventList(gel);\n        \n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of set group event list method of class com"}, {"path": "./Dataset/funcom_test/26284323.txt", "code": "public void showHTMLDocument(URL url, String targetFrame, boolean reload) {\n        if (url != null) {\n            if (targetFrame == null)\n                targetFrame = viewer.name;\n            showDocument(new HistoryItem(url, targetFrame, url.getRef(), null, null), null,\n                    reload, HTMLConstants.HISTORY_NEW, 0);\n        }\n    }", "comment": "shows the contents of the specified code url code in the named"}, {"path": "./Dataset/funcom_test/14624389.txt", "code": "public void testisAvailable() {\n        System.out.println(\"isAvailable\");\n        org.gps.types.GpsSatellite instance = new org.gps.types.GpsSatellite();\n        boolean expectedResult = false;\n        boolean result = instance.isAvailable();\n        assertTrue(expectedResult==result);\n        \n        instance.setAvailable(true);\n        expectedResult = true;\n        result = instance.isAvailable();\n        assertTrue(expectedResult==result);\n        \n        \n    }", "comment": "test of is available method of class org"}, {"path": "./Dataset/funcom_test/40490733.txt", "code": "public double getVelocity() {\n        try {\n            return (((rate110.getVoltage() - vref.getVoltage()) * MV_PER_VOLT) / MV_PER_DEG_PER_SEC) - zeroV ;\n        } catch (IOException ex) {\n            ex.printStackTrace();\n            return -1;//TODO errors\n        }\n    }", "comment": "calculates the velocity reported by the gyro"}, {"path": "./Dataset/funcom_test/29860369.txt", "code": "public void addLineNumber(int line) {\n    String\tlabel;\n\n    // create a unique label (syntactically illegal: cannot conflict with labels in source)\n    label = \"'\" + lineNumberId++;\n    try {\n      addLabel(label);\n    } catch (KsmError e) {\n      throw new InconsistencyException();\n    }\n    lines.addElement(new LineNumberInfo((short)line, new LabelReference(label)));\n  }", "comment": "add a line number info"}, {"path": "./Dataset/funcom_test/36635055.txt", "code": "public void flipGridYAxis(){\n        int[] change = new int[editSizeX*editSizeY];\n        for(int i = 0; i < editSizeX; i++){\n            for(int j = 0; j < editSizeY; j++)\n                change[i+((editSizeY-j-1)*editSizeX)] = editgrid[i][j];\n        }\n        copyArray(change);\n    }", "comment": "this function flips the editing grid along the y axis"}, {"path": "./Dataset/funcom_test/38221365.txt", "code": "public void internalFrameActivated(InternalFrameEvent e) {\n    parentDesktop.activeModule = module;\n    module.activateModule();\n    ((CAbstractMainForm)parentDesktop.getMainForm()).fireModuleChanged(\n      new CModuleEvent(parentDesktop.getMainForm(), null, module,\n      CModuleEvent.ACTIVATED));\n  }", "comment": "invoked when a internal frame has been activated"}, {"path": "./Dataset/funcom_test/33993938.txt", "code": "protected void addColorPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_GroupWidget_color_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_GroupWidget_color_feature\", \"_UI_GroupWidget_type\"),\n\t\t\t\t UiPackage.Literals.GROUP_WIDGET__COLOR,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the color feature"}, {"path": "./Dataset/funcom_test/48003805.txt", "code": "private Message deleteSubjectHandler(Object deleteSubject) {\n\t\tif (deleteSubject instanceof Subject) {\n\t\t\tSubject subject = (Subject) deleteSubject;\n\t\t\tboolean flag = dataAccess.deleteSubject(subject.getName());\n\t\t\tif (flag) {\n\t\t\t\tprintToLog(\"delete subject succeed \");\n\t\t\t\treturn (new Message(Message.DELETE_SUBJECT_RESPOND,\n\t\t\t\t\t\tMessage.SUCCEED));\n\t\t\t}\n\n\t\t}\n\t\tprintToLog(\"delete subject failed \");\n\t\treturn (new Message(Message.DELETE_SUBJECT_RESPOND, Message.FAIL));\n\t}", "comment": "this method get subject and call method delete subject to delete subject"}, {"path": "./Dataset/funcom_test/22618690.txt", "code": "public List getOrderedPages() {\n\t\tList pageParams = new ArrayList();\n\t\tfor (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\n\t\t\tString propName = (String) e.nextElement();\n\t\t\tif (propName.startsWith(\"page.\")) {\n\t\t\t\tpageParams.add(propName);\n\t\t\t}\n\t\t}\n\t\tCollections.sort(pageParams, new PageSorter());\n\t\tprtln(\"sorted pages\");\n\t\treturn pageParams;\n\t}", "comment": "gets the ordered pages attribute of the meta data framework object"}, {"path": "./Dataset/funcom_test/29854418.txt", "code": "public GregorianCalendar toCalendar() {\n    GregorianCalendar   calendar = new GregorianCalendar();\n    \n    calendar.clear();\n    calendar.set(Calendar.YEAR, getYear());\n    calendar.set(Calendar.MONTH, getMonth() - 1);\n    calendar.set(Calendar.DAY_OF_MONTH, getDay());\n    return calendar;\n  }", "comment": "create an instance of calendar to represent date"}, {"path": "./Dataset/funcom_test/29065191.txt", "code": "private void addPanelNorth(Container parent) {\n\t\tJPanel panelNorth = new JPanel();\n\t\tpanelNorth.setBorder(BorderFactory.createEmptyBorder());\n\t\tJLabel lblStrategy = new JLabel();\n\t\tlblStrategy.setText(\"Strategy :\");\n\t\tparent.add(panelNorth, BorderLayout.NORTH);\n\t\tpanelNorth.add(lblStrategy);\n\t\tthis.cmbStrategy = new JComboBox();\n\t\tpanelNorth.add(this.cmbStrategy);\n\t\t\n\t\tcreateStrategies();\n\t\t\n\t\tthis.cmbStrategy.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tupdateStrategy();\n\t\t\t}\n\t\t});\n\t}", "comment": "add a combobox with all strategies"}, {"path": "./Dataset/funcom_test/19507007.txt", "code": "public void testSimilarInt() {\n\t\tfinal IRodinFile rf1 = getRodinFile(\"P/X.test\");\n\t\tfinal RodinTestRoot r1 = (RodinTestRoot) rf1.getRoot();\n\t\tfinal NamedElement ie1 = getNamedElement(r1, \"foo\");\n\n\t\tfinal IRodinFile rf2 = getRodinFile(\"P/Y.test\");\n\t\tfinal RodinTestRoot r2 = (RodinTestRoot) rf2.getRoot();\n\t\tfinal NamedElement ie2 = getNamedElement(r2, ie1.getElementName());\n\t\tassertEquals(ie1, ie1.getSimilarElement(rf1));\n\t\tassertEquals(ie2, ie1.getSimilarElement(rf2));\n\t}", "comment": "ensures that a similar element for an internal element is constructed"}, {"path": "./Dataset/funcom_test/22625017.txt", "code": "public String getVocabTotalBarPercent() {\n\t\tfloat percent = (float)( (float)Integer.parseInt( libraryTotal ) / (float)largestTotalInThisGroup ) *\n\t\t\tPERCENT_ADJUST;\n\t\tString perc = Float.toString( percent );\n\t\tint ind = perc.indexOf( \".\" );\n\t\tif ( ind > -1 ) {\n\t\t\tperc = perc.substring( 0, ind );\n\t\t}\n\t\treturn perc;\n\t}", "comment": "gets the vocab total bar attribute of the histogram vocab node object"}, {"path": "./Dataset/funcom_test/19493939.txt", "code": "public void testBR5_simple() {\n\n\t\tdoTest( \"s \u2260 t\",\n\t\t\t\t\"\u00ac(s = t)\", false, br_te);\n\t\tdoTest( \"x \u2260 0\",\n\t\t\t\t\"\u00ac(x = 0)\", false, br_te);\n\t\tdoTest( \"x \u2260 TRUE\",\n\t\t\t\t\"\u00ac(x = TRUE)\", false, br_te);\n\t}", "comment": "tests for br5"}, {"path": "./Dataset/funcom_test/2971386.txt", "code": "public int changeSamplePosition(int sampleNo, int samplePosition) {\n    for(int i=0;i<sampleArr.size();i++) {\n      FMSample fms = (FMSample)sampleArr.get(i);\n      if (fms.getSampleNo()==sampleNo) {\n        fms.setPosition(samplePosition);   // does this change the version in sampleArr???\n        return samplePosition;\n      }\n    }\n    return 0;\n  }", "comment": "change the position of sample number sample no to position sample position"}, {"path": "./Dataset/funcom_test/48968504.txt", "code": "private JButton getPreviousPageButton() {\n\t\tif (previousPageButton == null) {\n\t\t\tpreviousPageButton = new JButton();\n\t\t\tpreviousPageButton.setEnabled(false);\n\t\t\tpreviousPageButton.setPreferredSize(new Dimension(24, 24));\n\t\t\tpreviousPageButton.setIcon(ImageManager\n\t\t\t\t\t.getImageIconByShortName(\"action_back.gif\"));\n\n\t\t\tpreviousPageButton.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent event) {\n\t\t\t\t\tshowPrevious();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn previousPageButton;\n\t}", "comment": "show previous card label"}, {"path": "./Dataset/funcom_test/19372924.txt", "code": "private Set subSetSuperOf(Set conds) {\n\t\t//Debug.defaultPrintln(this,\"Set super state \" + s);\n\t\tSet sst = new HashSet();\n\t\tfor (Iterator i = subStates_.iterator(); i.hasNext();) {\n\t\t\tBasicState st = (BasicState)i.next();\n\t\t\t\n\t\t\tif (moreGeneralSet(st.getConditions(),conds)) {\n\t\t\t\tsst.add(st);\n\t\t\t}\n\t\t}\n\t\treturn sst;\n\t}", "comment": "method sub set super of"}, {"path": "./Dataset/funcom_test/22325885.txt", "code": "private void readCFG(InputStream taskCFGInputStream) throws Exception {\n        log.debug(\"Running TaskJarAnalyzer.readCFG(taskCFGInputStream)..\");\n        Config taskConfig = new Config(taskCFGInputStream);\n        taskClassName = taskConfig.getStringValue(\"taskClassName\");\n        taskStateClassName = taskConfig.getStringValue(\"taskStateClassName\");\n    }", "comment": "reads the contents of the config file"}, {"path": "./Dataset/funcom_test/48023365.txt", "code": "public void evaluatePopulation (IntegerTypePopulation population, Simulation simulation, Object[] object){\n\t\t\n\t\tIntegerTypePopulation intPopulation = (IntegerTypePopulation) population;\n\t\t\n\t\tfor (int i = 0; i < intPopulation.getChromossomesSet().size(); i++){\n\t\t\t\n\t\t\tintPopulation.getChromossomesSet().get(i).setFitness(this.calculateFitness(simulation.getChromossomesConfiguration(), intPopulation, i));\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}", "comment": "this method evaluates the given population passed as"}, {"path": "./Dataset/funcom_test/18927486.txt", "code": "private List memListForHier(int hierIndex, List positions) {\n    List memList = new ArrayList();\n    PositionLoop : for (Iterator iter = positions.iterator(); iter.hasNext();) {\n      Position pos = (Position) iter.next();\n      Member m = pos.getMembers()[hierIndex];\n      if (!memList.contains(m))\n        memList.add(m);\n    }\n    return memList;\n  }", "comment": "extract members of hier from result"}, {"path": "./Dataset/funcom_test/3457090.txt", "code": "protected void createNewServerProcess( Socket socket ){\n\t\tlogger.info( \"Received connection on port \" + getPort() + \" from [\" + socket.getInetAddress() + \":\"+ socket.getPort() + \"].\");\n\t\t\n\t\tThread t = new Thread( getNewServerProcess(socket) );\n\t\tt.start();\n\t\tgetServerProcesses().add( t );\n\t\tnew Thread( new Monitor( t ) ).start();\n\t}", "comment": "create a new socket process for a new connection"}, {"path": "./Dataset/funcom_test/38220868.txt", "code": "public void actionPerformed(ActionEvent e) {\n    String cmd = e.getActionCommand();\n    if (cmd.equals(\"About\") || cmd.equals(\"ModuleAbout\"))\n      showAboutDialog();\n    else if (cmd.equals(\"ModuleProperties\"))\n      showPropertyDialog();\n    else System.out.println(\"Unsupported action: \" + cmd);\n  }", "comment": "performs the events from user interface and received from the main form"}, {"path": "./Dataset/funcom_test/21629780.txt", "code": "public String getXlabel() {\n        if (null != this.xlabel) {\n            return this.xlabel;\n        }\n        ValueExpression _ve = getValueExpression(\"xlabel\");\n        if (_ve != null) {\n            return (java.lang.String) _ve.getValue(getFacesContext().getELContext());\n        } else {\n            return null;\n        }\n    }", "comment": "p return the x axis label of the chart"}, {"path": "./Dataset/funcom_test/33718454.txt", "code": "public void testSetDescription() {\n        System.out.println(\"setDescription\");\n        \n        String description = \"\";\n        Event_StubImpl instance = new Event_StubImpl();\n        \n        instance.setDescription(description);\n        \n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of set description method of class tools"}, {"path": "./Dataset/funcom_test/48003779.txt", "code": "private Message addGenreHandler(Object addGenre) {\n\t\tif (addGenre instanceof Genre) {\n\t\t\tGenre genre = (Genre) addGenre;\n\t\t\tboolean flag = dataAccess.addGenre(genre);\n\t\t\tif (flag != false) {\n\t\t\t\tprintToLog(\"succeed to add genre\");\n\t\t\t\treturn (new Message(Message.ADD_GENRE_RESPOND, refreshCatalog()\n\t\t\t\t\t\t.getValue()));\n\t\t\t}\n\n\t\t}\n\t\tprintToLog(\"failed to add genre\");\n\t\treturn (new Message(Message.ADD_GENRE_RESPOND, Message.FAIL));\n\t}", "comment": "this method get genre and call method add genre to delete the genre"}, {"path": "./Dataset/funcom_test/5592526.txt", "code": "public void setActiveTab(int index) {\n    // check if this is perhaps the last tab.\n    if (index != -1) {\n      String title = getTitleAt(index);\n      wpTab tab = (wpTab) tabTable.get(title);\n      tab.setActive();\n      updateActionStatus();\n      window.updateDomEditor(tab);\n    }\n  }", "comment": "set the active tab with the provided index"}, {"path": "./Dataset/funcom_test/19506422.txt", "code": "protected boolean makeSpace(int space) {\n\n\t\tint limit;\n\n\t\tlimit = this.getSpaceLimit();\n\n\t\t/* if space is already available */\n\t\tif (getCurrentSpace() + space <= limit) {\n\t\t\treturn true;\n\t\t}\n\n\t\t/* if entry is too big for cache */\n\t\tif (space > limit) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/* Free up space by removing oldest entries */\n\t\twhile (getCurrentSpace() + space > limit && fEntryQueueTail != null) {\n\t\t\tremoveForSpace(fEntryQueueTail);\n\t\t}\n\t\treturn true;\n\t}", "comment": "ensures there is the specified amount of free space in the receiver by"}, {"path": "./Dataset/funcom_test/38515848.txt", "code": "private void installDeferredBreakpoints() {\n        IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager()\n                .getBreakpoints(ParserLaunchConstants.PARSER_DEBUG_MODEL_ID);\n        for(int i = 0; i<breakpoints.length; i++ ) {\n            breakpointAdded(breakpoints[i]);\n        }\n    }", "comment": "install breakpoints that are already registered with the breakpoint"}, {"path": "./Dataset/funcom_test/31468735.txt", "code": "public void appendData(String data) {\n\n        if (readOnly) {\n        \tthrow new DOMExceptionImpl(\n        \t\tDOMException.NO_MODIFICATION_ALLOWED_ERR,\n        \t\t\"DOM001 Modification not allowed\");\n        }\n\n        if (syncData) {\n            synchronizeData();\n        }\n        \n\t\t// Handles mutation event generation, if any\n        setNodeValue(value+data);\n\n    } // appendData(String)", "comment": "concatenate additional characters onto the end of the data"}, {"path": "./Dataset/funcom_test/29995639.txt", "code": "public Space readMinimumDistance(SpaceVec r) {\n\t\tif (r.equals(readStart())) {\n\t\t\treturn Space.ORIGIN;\n\t\t}\n\n\t\tSpaceVec delta = r.minus(readSpaceVec(readStartTime()));\n\t\tSpace alpha = delta.abs().times(delta.direction().dot(readDirection()));\n\t\tdouble d = delta.abs().amount(Space.M);\n\t\tdouble a = alpha.amount(Space.M);\n\n\t\treturn Space.M.times(Math.sqrt((d * d) - (a * a)));\n\t}", "comment": "get the minimum distance from a given vector of a location in space"}, {"path": "./Dataset/funcom_test/42171692.txt", "code": "protected void addMessagePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DebugLog_message_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DebugLog_message_feature\", \"_UI_DebugLog_type\"),\n\t\t\t\t ActionStepPackage.eINSTANCE.getDebugLog_Message(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the message feature"}, {"path": "./Dataset/funcom_test/19498434.txt", "code": "public void testMessages() throws Exception {\n\t\tSet<IRodinProblem> problems = new HashSet<IRodinProblem>(specs.length * 4 / 3 + 1);\n\t\tfor (Spec spec : specs) {\n\t\t\tproblems.add(spec.problem);\n\t\t}\n\t\tfor (IRodinProblem problem : GraphProblem.values()) {\n\t\t\tboolean found = problems.contains(problem);\n\t\t\tassertTrue(\"No spec for problem \" + problem, found);\n\t\t}\n\t\t//assertEquals(\"wrong number of problems\", specs.length, GraphProblem.values().length);\n\t}", "comment": "check whether the messages loaded from the properties file are complete"}, {"path": "./Dataset/funcom_test/19345774.txt", "code": "protected void prepareCursor() {\n\n\t    if (isPrepareNeeded(sqlCursor)) {\n\t        try {\n\t            sqlCursor = connect.getConnection().prepareStatement(\n\t                          sSQL\n\t                        + sFrom\n\t                        + sWhereSQL\n\t                  \t    + sWhere\n\t                  \t    + sOrderBy\n\t                       );\n\t            message = \"\";\n\t        } catch (Exception ex) {\n\t        \tex.printStackTrace();\n\t            System.out.println(\"prepare Cursor >> \" + (connect == null));\n\t            setMessage(ex.getMessage(), ex);\n//\t        } finally {\n//\t        \tconnect.free();\n\t        }\n\t    }\n\t}", "comment": "this method prepares the sql statement for retrieval"}, {"path": "./Dataset/funcom_test/26495745.txt", "code": "private Category getChildCategory(Configuration aConfig, Category aParent, String aName) {\n    Category child = null;\n    if (aParent == null && aConfig.containsCategory(aName)) {\n      child = aConfig.getCategory(aName);\n    } else if (aParent != null && aParent instanceof NestedCategory) {\n      child = ((NestedCategory) aParent).getCategory(aName);\n    }\n    \n    return child;\n  }", "comment": "utility method to retrieve the child category"}, {"path": "./Dataset/funcom_test/37398396.txt", "code": "private void encodeNext(StringBuffer buffer, Iterator i) {\n    String key = i.next().toString();\n    String value = Converter.convert(parameters.get(key));\n    buffer.append(ServletUtils.encode(key));\n    buffer.append(\"=\");\n    buffer.append(ServletUtils.encode(value));\n  }", "comment": "encode the next parameter value"}, {"path": "./Dataset/funcom_test/36221551.txt", "code": "public void clear() {\n\t\ttry {\n\t\t\trecman.close();\n\t\t\tFile db = new File(pluginDir + DBNAME + \".db\");\n\t\t\tdb.delete();\n\t\t\tdb = new File(pluginDir + DBNAME + \".lg\");\n\t\t\tdb.delete();\n\t\t\tlogger.info(pluginDir + DBNAME + \".db/.lg\" + \" deleted....\");\n\t\t\tinitRecordManager();\n\t\t\tmetrics.clear();\n\t\t} catch (Throwable e) {\n\t\t\tlogger.log(Level.SEVERE, \"Error deleting jdbm database \", e);\n\t\t}\n\t}", "comment": "clean out entire database and set up a new one"}, {"path": "./Dataset/funcom_test/34097194.txt", "code": "public static final SetOperation ADDED_WARNINGS = new SetOperation(){\n\t\tpublic SortedBugCollection perform(Set<BugInstance> result,\n\t\t\t\tSortedBugCollection origCollection, SortedBugCollection newCollection) {\n\t\t\tresult.addAll(newCollection.getCollection());\n\n\t\t\t// Get shared instances\n\t\t\tList<BugInstance> inBoth = getSharedInstances(result, origCollection);\n\n\t\t\t// Remove the shared instances from the result\n\t\t\tremoveBugInstances(result, inBoth);\n\n\t\t\treturn newCollection;\n\t\t}\n\t};", "comment": "get the warnings which were em added em"}, {"path": "./Dataset/funcom_test/51122972.txt", "code": "public InputStream getFileInputStream(String name) {\n      try {\n         //#changed by joe peer\n         //UploadedFile file = (UploadedFile)files.get(name);\n         FileHolder filePart = (FileHolder) files.get(name);\n\n         return filePart.getInputStreamFromBuffer(); // may be null\n      } catch (Exception e) {\n         return null;\n      }\n   }", "comment": "returns a input stream object for the specified file saved on the servers"}, {"path": "./Dataset/funcom_test/51016361.txt", "code": "private void lazyInitGraphIndexMap(Set<Network> graphs) {\n\n        if (graphIndices == null) {\n            graphIndices = new HashMap<Network,Integer>(graphs.size());\n            int i = 0;\n            for (Network g : graphs) {\n                graphIndices.put(g,i++);\n            }\n        }\n    }", "comment": "initializes the graph index map if necessary"}, {"path": "./Dataset/funcom_test/3986269.txt", "code": "private int getDistance(FingerPrint category) {\n\t\tint distance = 0;\n\t\tint count = 0;\n\t\tfor (Entry<String, Integer> entry : this.entries) {\n\t\t\tString ngram = entry.getKey();\n\t\t\tcount++;\n\t\t\tif (count > 1000) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!category.containsKey(ngram)) {\n\t\t\t\tdistance += category.size();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdistance += Math.abs(this.getPosition(ngram)\n\t\t\t\t\t- category.getPosition(ngram));\n\t\t}\n\t\treturn distance;\n\t}", "comment": "computes and returns the distance of this finger print to the finger print"}, {"path": "./Dataset/funcom_test/4307504.txt", "code": "protected void openFile() throws IOException {\n\t\tif (this.file == null) {\n\t\t\tfile = new File(indexDir + \n\t\t\t\t\tSystem.getProperty(\"file.separator\") + filename);\n\t\t\tif (!file.exists()) {\n\t\t\t\tthrow new FileNotFoundException(\"Index file \\\"\" + \n\t\t\t\t\t\tfile.getCanonicalPath() + \" \\\" was not found.\");\n\t\t    }\n\t\t}\n\t\tif (this.handle == null) {\n\t\t\tthis.handle = new RandomAccessFile(this.file, \"r\");\n\t\t}\n    }", "comment": "checks if the index file has been opened and if not opens it"}, {"path": "./Dataset/funcom_test/22627656.txt", "code": "public String getSimpleContentType() {\n\t\tif (!hasSimpleContent()) {\n\t\t\treturn null;\n\t\t}\n\t\tElement e = getElement();\n\t\tNode node = e.selectSingleNode(NamespaceRegistry.makeQualifiedName(xsdPrefix, \"simpleContent\") + \"/\" +\n\t\t\tNamespaceRegistry.makeQualifiedName(xsdPrefix, \"extension\"));\n\t\tif (node == null) {\n\t\t\tprtln(\"extension node not found for \" + getName());\n\t\t\treturn null;\n\t\t}\n\t\treturn ((Element) node).attributeValue(\"base\");\n\t}", "comment": "gets the base extension type of the simple content element of the"}, {"path": "./Dataset/funcom_test/7955602.txt", "code": "public void Display_store() {\n\t\tfinal Iterator iter = IndStore.values().iterator();\n\n\t\twhile (iter.hasNext()) {\n\t\t\tfinal Swizzler indswz = (Swizzler) iter.next();\n\n\t\t\tSystem.out.println(\"\\nIV: \" + indswz.ind_var() + \" tgt: \"\n\t\t\t\t\t+ indswz.target() + \"\\narray: \" + indswz.array()\n\t\t\t\t\t+ \" init: \" + indswz.init_val() + \" end: \"\n\t\t\t\t\t+ indswz.end_val());\n\t\t}\n\t}", "comment": "displays to system"}, {"path": "./Dataset/funcom_test/22625645.txt", "code": "protected String getTermStringFromStringArray(String[] vals) {\n\t\tif (vals == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString tmp = \"\";\n\t\ttry {\n\t\t\tfor (int i = 0; i < vals.length; i++) {\n\t\t\t\ttmp += \" \" + vals[i].substring(vals[i].lastIndexOf(\":\") + 1, vals[i].length());\n\t\t\t}\n\t\t} catch (Throwable e) {}\n\t\treturn tmp.trim();\n\t}", "comment": "gets the appropriate terms from a string array of metadata fields"}, {"path": "./Dataset/funcom_test/40864447.txt", "code": "public TextField getTextField5() {\n        if (textField5 == null) {//GEN-END:|27-getter|0|27-preInit\n            // write pre-init user code here\n            textField5 = new TextField(\"L\\u00EDquido:\", null, 32, TextField.DECIMAL);//GEN-LINE:|27-getter|1|27-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|27-getter|2|\n        return textField5;\n    }", "comment": "returns an initiliazed instance of text field5 component"}, {"path": "./Dataset/funcom_test/4813004.txt", "code": "private int detectDirection(int anOldCoordinate, int aNewCoordinate) throws IllegalArgumentException {\n    if (aNewCoordinate - anOldCoordinate > 0) {\n      return Direction.DOWN_OR_RIGHT;\n    } else if (aNewCoordinate - anOldCoordinate < 0) {\n      return Direction.UP_OR_LEFT;\n    } else {\n      throw new IllegalArgumentException(\"Method does not support the direction detect for equal coordinates.\");\n    }\n  }", "comment": "checks if the direction from old coordinate to new coordinate"}, {"path": "./Dataset/funcom_test/13483109.txt", "code": "public void removeEdge(GraphNode v, GraphNode w) {\n        Block src = (Block) v;\n        Block dst = (Block) w;\n\n        if (DEBUG) {\n            System.out.println(\"    REMOVING EDGE \" + src + \" -> \" + dst);\n        }\n\n        super.removeEdge(src, dst);\n\n        cleanupEdge(src, dst);\n    }", "comment": "removes an edge from the graph and performs the necessary cleanup"}, {"path": "./Dataset/funcom_test/29591805.txt", "code": "public CoordinateSystem findCoordinateSystem(String name) {\n    if (name == null) return null;\n    for (int i=0; i<coordSys.size(); i++) {\n      CoordinateSystem v = (CoordinateSystem) coordSys.get(i);\n      if (name.equals(v.getName()))\n        return v;\n    }\n    return null;\n  }", "comment": "retrieve the coordinate system with the specified name"}, {"path": "./Dataset/funcom_test/26496883.txt", "code": "public void testPop() {\n    CallStack st = new CallStack(new IdFactory());\n    super.assertTrue(st.peek() == null);\n    Call c = st.create();\n    super.assertEquals(c, st.peek());\n    st.pop();\n    super.assertTrue(st.peek() == null);\n  }", "comment": "test of pop method of class org"}, {"path": "./Dataset/funcom_test/22628739.txt", "code": "public String getOpmlFromNode( DefaultMutableTreeNode selection ) {\n\t\tStringBuffer ret = new StringBuffer();\n\t\tif ( selection.getUserObject() instanceof OTag ) {\n\t\t\tOTag tag = (OTag) selection.getUserObject();\n\t\t\tString title = tag.getAttribute( \"text\" );\n\t\t\tret.append( getOpmlDeclaration( title, \"\" ) );\n\t\t\tret.append( writeTraverse( selection ) );\n\t\t\tret.append( \"\\t</body>\\n</opml>\" );\n\t\t}\n\t\treturn ret.toString();\n\t}", "comment": "traverse the given node and return its contents as opml"}, {"path": "./Dataset/funcom_test/18421482.txt", "code": "private void generateRecipeMetadata (Recipe re) {\n\t\t\n\t\tre.setCreateDate(new Date());\n\t\tre.setCreateBy((Dietician) m_UserHandler.getUser());\n\t\tre.setNutrients(re.getNutrients());\n\t\t\n\t\tfor (IngredientAmount f : re.getIngredients()) {\n\t\t\tif (f.getFood() instanceof Recipe) {\n\t\t\t\tgenerateRecipeMetadata((Recipe) f.getFood());\n\t\t\t}\n\t\t}\n\t}", "comment": "this is a recursive function which assigns the current date and the person"}, {"path": "./Dataset/funcom_test/27798034.txt", "code": "public void testLegalArgs0() throws Exception {\n        AllTests.standardOut (\"testLegalArgs0\");\n\n        String geometryFilename = \"../data/galFiltered.gml\";\n        String interactionsFilename = \"../data/tideker0/yeastSmall.intr\";\n\n        String[] args = {\"-g\", geometryFilename,\n                         \"-i\", interactionsFilename};\n\n        CytoscapeConfig config = new CytoscapeConfig(args);\n\n        assertTrue(config.inputsError());\n\n    } // testLegalArgs0", "comment": "ensure that multiple sources of the input graph e"}, {"path": "./Dataset/funcom_test/2697199.txt", "code": "private Chain isKnownChain(String chainID, List<Chain> chains){\n\n\t\tfor (int i = 0; i< chains.size();i++){\n\t\t\tChain testchain =  chains.get(i);\n\t\t\t//System.out.println(\"comparing chainID >\"+chainID+\"< against testchain \" + i+\" >\" +testchain.getName()+\"<\");\n\t\t\tif (chainID.equals(testchain.getName())) {\n\t\t\t\t//System.out.println(\"chain \"+ chainID+\" already known ...\");\n\t\t\t\treturn testchain;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}", "comment": "test if the chain is already known is in current model"}, {"path": "./Dataset/funcom_test/31318107.txt", "code": "private void sendRetransmitAdvert(short key, byte mask) {\n        PageChecksum checksum = new PageChecksum(controller.document);\n        PacketHeader header = controller.createPacketHeader(PacketConstants.RETRANSMIT_ADVERT_MESSAGE);\n        \n        RetransmitAdvertMessage advert = new RetransmitAdvertMessage(header, key, mask, controller.lastUpdateTime, checksum);\n        controller.networkInterface.sendPacket(advert);\n    }", "comment": "sends a retransmit advert with the specified key and mask"}, {"path": "./Dataset/funcom_test/24330213.txt", "code": "private void save() {\n        // At the moment windows command files are written only\n        // TODO: Add other operating systems like mac and linux.\n        this.saveWindowsCommandFile();\n        this.saveConfigFile();\n        this.downloadStarter.getTimer().saveConfiguration();\n        // Read the config file again to refresh the command line parameters in the comment lin\n        this.readConfigFile();\n    }", "comment": "save the command file and the config file"}, {"path": "./Dataset/funcom_test/38531236.txt", "code": "public void init(Object context) throws javax.xml.rpc.ServiceException {\n        ServletEndpointContext soapContext = (ServletEndpointContext) context;\n        servletContext = soapContext.getServletContext();\n        database = (Database) servletContext.getAttribute(databaseKey);\n        if (database == null){\n            throw new javax.xml.rpc.ServiceException(\"Database not found \" +\n            \"using attribute \" + databaseKey );\n        }\n    }", "comment": "grabs the database from the servlet context with attribute org"}, {"path": "./Dataset/funcom_test/10893093.txt", "code": "public void setExpectHeaders(String s) {\n        this.expectHeaders = new HashMap();\n        StringTokenizer tok = new StringTokenizer(s, \"|\");\n        while (tok.hasMoreElements()) {\n            String header = (String) tok.nextElement();\n            setHeaderDetails(header, expectHeaders, false);\n        }\n    }", "comment": "code set expect headers code configures gtest to look for the header"}, {"path": "./Dataset/funcom_test/19517824.txt", "code": "public void addPages() {\n\t\tmatchingPage = new MatchingWizardPage(selection, openFiles, data);\n\t\taddPage(matchingPage);\n\t\tsyntaxCheckingPage = new SyntaxCheckingWizardPage(matchingPage);\n\t\taddPage(syntaxCheckingPage);\n\t\tmergingPage = new MergingWizardPage(matchingPage, openFiles, data);\n\t\taddPage(mergingPage);\t\t\n\t\trenamingPage = new RenamingWizardPage(matchingPage, mergingPage, data);\n\t\taddPage(renamingPage);\n\t\tincorporatingPage = new IncorporatingWizardPage(matchingPage, mergingPage, data);\n\t\taddPage(incorporatingPage);\n\t}", "comment": "adding the pages to the wizard"}, {"path": "./Dataset/funcom_test/41323208.txt", "code": "public void resetPreviewCanvas() {\n\t\tPCamera theCamera = itsPreviewCanvas.getCamera();\n\t\tfor (int i = 0; i < theCamera.getLayerCount(); i++) {\n\t\t\tif (theCamera.getLayer(i) != itsPreviewLocalizatorLayer)\n\t\t\t\ttheCamera.removeLayer(i);\n\t\t}\n\t\tif (LessonMapper2.getInstance().getActiveProject() != null)\n\t\t\ttheCamera.addLayer(0, LessonMapper2.getInstance()\n\t\t\t\t\t.getUpperActivity());\n\t}", "comment": "reset preview canvas"}, {"path": "./Dataset/funcom_test/29601956.txt", "code": "protected void removeArgs(int i, int n) {\n      ArrayList<String> a = new ArrayList<String>(Arrays.asList(this.arguments));\n      while (n-->0) a.remove(i);\n      this.arguments =  a.toArray(new String[a.size()]);\n  }", "comment": "argument pair was removed adjust rest of args accordingly"}, {"path": "./Dataset/funcom_test/42171607.txt", "code": "protected void addSetAsDatatypePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_SetColMapping_setAsDatatype_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_SetColMapping_setAsDatatype_feature\", \"_UI_SetColMapping_type\"),\n\t\t\t\t ActionStepPackage.eINSTANCE.getSetColMapping_SetAsDatatype(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the set as datatype feature"}, {"path": "./Dataset/funcom_test/16652581.txt", "code": "public void printNoHtml(String text) throws RegainException {\n    if (text != null) {\n      text = RegainToolkit.replace(text, \"<\", \"&lt;\");\n      text = RegainToolkit.replace(text, \">\", \"&gt;\");\n    }\n    \n    print(text);\n  }", "comment": "prints text to a page and escapes all html tags"}, {"path": "./Dataset/funcom_test/34427792.txt", "code": "public void writeExc(List<String> ls) throws Exception {\n        if (ls == null || ls.isEmpty()) return;\n\n        Iterator<String> iter = ls.iterator();\n        writeExc(iter.next());\n        while (iter.hasNext()) {\n            writeExc(ZString.EOL);\n            writeExc(iter.next());\n        }\n        txt.flush();\n    }", "comment": "writes the specified list of strings to this text writer each line is"}, {"path": "./Dataset/funcom_test/7486140.txt", "code": "public JingleMediaSession createMediaSession(PayloadType payloadType, final TransportCandidate remote, final TransportCandidate local, final JingleSession jingleSession) {\n        ScreenShareSession session = null;\n        session = new ScreenShareSession(payloadType, remote, local, \"Screen\", jingleSession);\n        if (encoder != null) {\n            session.setEncoder(encoder);\n        }\n        if (decoder != null) {\n            session.setDecoder(decoder);\n        }\n        return session;\n    }", "comment": "returns a new jingle media session"}, {"path": "./Dataset/funcom_test/25584687.txt", "code": "public void removeAllBodiesAndJoints() {\n        GameObjectCollection bodies = getGameObjectCollection(\"Bodies\");\n        while (bodies.size > 0) {\n            removeGameObject(bodies.gameObjects[0]);\n        }\n        \n        GameObjectCollection joints = getGameObjectCollection(\"Joints\");\n        while (joints.size > 0) {\n            removeJoint((Joint) joints.gameObjects[0]);\n        }\n        \n        arbiters.clear();\n    }", "comment": "remove all bodies and joints from the physics simulation"}, {"path": "./Dataset/funcom_test/47662640.txt", "code": "protected void addPackagePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_PackageWorkProductAggregation_package_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_PackageWorkProductAggregation_package_feature\", \"_UI_PackageWorkProductAggregation_type\"),\n\t\t\t\t MethodcontentclassdiagramPackage.Literals.PACKAGE_WORK_PRODUCT_AGGREGATION__PACKAGE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the package feature"}, {"path": "./Dataset/funcom_test/35102703.txt", "code": "private JTabbedPane getTpGroszanzeige() {\n    if (tpGroszanzeige == null) {\n      tpGroszanzeige = new JTabbedPane();\n      tpGroszanzeige.setBackground(new Color(238, 238, 238));\n      tpGroszanzeige\n          .addTab(\"Gro\\u00dfanzeige\", null, getSpGroszanzeige(), null);\n      tpGroszanzeige.addTab(\"Zusatzdetails\", null, getSpZusatzdetails(), null);\n    }\n    return tpGroszanzeige;\n  }", "comment": "this method initializes tp groszanzeige"}, {"path": "./Dataset/funcom_test/3667240.txt", "code": "public void setExtent(double newExtent) {\n        double extent = newExtent;\n        if (extent < 0.0)\n            extent = 0.0;\n        if (extent > (m_max - m_value))\n            extent = m_max - m_value;\n        setRangeProperties(\n            m_value, extent, m_min, m_max, m_adjusting,\n            LinearRangeModelEvent.GENERAL_ADJUSTMENT\n        );\n    }", "comment": "sets the models code extent code"}, {"path": "./Dataset/funcom_test/40864476.txt", "code": "public TextField getTextField10() {\n        if (textField10 == null) {//GEN-END:|32-getter|0|32-preInit\n            // write pre-init user code here\n            textField10 = new TextField(\"Bono 2:\", null, 32, TextField.DECIMAL);//GEN-LINE:|32-getter|1|32-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|32-getter|2|\n        return textField10;\n    }", "comment": "returns an initiliazed instance of text field10 component"}, {"path": "./Dataset/funcom_test/49894493.txt", "code": "public void testRpc() {\n\t\ttry {\n\t\t\t// Test the web server (which also tests the rpc server)\n\t\t\t// by connecting via the clients\n\t\t\tVector params = new Vector();\n\t\t\tparams.add(REQUEST_PARAM_VALUE);\n\t\t\tObject response = client.execute(HANDLER_NAME + \".echo\", params);\n\t\t\tassertEquals(REQUEST_PARAM_VALUE, response);\n\t\t\t// params.removeAllElements();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "comment": "tests client server rpc via"}, {"path": "./Dataset/funcom_test/12284510.txt", "code": "private void signalToAllListeners(Class<?> cls) {\n    if (Controller.getInstance().getListeners(ClassLoaderListener.class) != null)\n      for (ClassLoaderListener l : Controller.getInstance().getListeners(ClassLoaderListener.class)) {\n        if (l != null)\n          l.onClassLoading(cls);\n      }\n  }", "comment": "signal to all registered listeners the class loading event"}, {"path": "./Dataset/funcom_test/4479146.txt", "code": "public void testSetType() {\n\t\tpawn.setType(\"Green\");\t\t\t\t\t\t\t\t\t//sets the type of pawn to \"Green\"\n\t\tassertTrue(pawn.getType().equals(\"Green\"));\t\t\t\t//checks whether the type of pawn has been changed or not\n\t\tpawn.setType(\"  Pawn   \");\t\t\t\t\t\t\t\t//sets back the type of the pawn \n\t}", "comment": "tests the set type mutator in pawn class"}, {"path": "./Dataset/funcom_test/14624233.txt", "code": "public void testremoveNMEAEventListener() {\n        System.out.println(\"removeNMEAEventListener\");\n        org.gps.interfaces.NMEAEventListener listener = null;\n        org.gps.interfaces.NMEAProvider instance = null;\n        instance.removeNMEAEventListener(listener);\n        \n        //TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of remove nmeaevent listener method of class org"}, {"path": "./Dataset/funcom_test/36514830.txt", "code": "private void fireValueChangedListenerValueChanged(ValueChangedEvent event) {\n        if (listenerList == null) return;\n        Object[] listeners = listenerList.getListenerList();\n        for (int i = listeners.length-2; i>=0; i-=2) {\n            if (listeners[i]==ValueChangedListener.class) {\n                ((ValueChangedListener)listeners[i+1]).valueChanged(event);\n            }\n        }\n    }", "comment": "notifies all registered listeners about the event"}, {"path": "./Dataset/funcom_test/14477486.txt", "code": "private void init() {\n    try {\n      //{socket\n      socket = new DatagramSocket();\n      //}socket\n      hostAddress = InetAddress.getByName(hostName);\n      userData = new BufferedReader(new InputStreamReader(System.in));\n    } catch (Exception excptn) {\n      excptn.printStackTrace();\n      System.exit(-1);\n    }\n  }", "comment": "init is a seperate method to keep"}, {"path": "./Dataset/funcom_test/25993703.txt", "code": "private void _UpdateBuzz() {\n\t\tLog.i(getClass().getSimpleName(), \"Notif!!!\");\n\t\tchangeTimer(Long.parseLong(config.getString(\"AndroBuzzUpdateInterval\", String.valueOf(UPDATE_INTERVAL/1000)))*1000);\n\t\t \n\t\tGetNewBuzz();\n\t\tif(nbNewBuzzIds > 0)\n\t\t{\n\t\t\tif(nbClient == 0)\n\t\t\t{\n\t\t\t\tif(config.getBoolean(\"NotificationEta\", true) == true)\n\t\t\t\t{\n\t\t\t\t\tcreateNotification();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmHandler.sendEmptyMessage(REPORT_MSG);\n\t\t\t}\n\t\t}\n\t}", "comment": "dont forget to fire update to the ui listener"}, {"path": "./Dataset/funcom_test/27800218.txt", "code": "public Dimension getMinimumSize ( JComponent component ) {\n    Dimension table_minimum_size =\n      treeTableTool.getTable().getMinimumSize();\n    if( treeTableTool.isHorizontal() ) {\n      return new Dimension( table_minimum_size.width, prerootDepth );\n    } else {\n      return new Dimension( prerootDepth, table_minimum_size.height );\n    }\n  } // getMinimumSize(..)", "comment": "return the minimum size of the tree table tool"}, {"path": "./Dataset/funcom_test/47478478.txt", "code": "protected boolean isInterestingFolder(IFolder folder) {\n\t\tif (folder.getName().equals(\"META-INF\") && folder.getParent() instanceof IProject) { //$NON-NLS-1$\n\t\t\treturn true;\n\t\t}\n\n\t\tif (folder.getName().equals(\"schema\") && folder.getParent() instanceof IProject) { //$NON-NLS-1$\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}", "comment": "returns true if the folder being visited is of interest to pde"}, {"path": "./Dataset/funcom_test/39299435.txt", "code": "public void charge(AGVRobot agv, ValueWithUnit<? extends EnergyUnit> amount) {\n        if(getStation().getAGVRobot() == agv) {\n            Battery battery = (Battery)agv.getModulesWithKey(getBatteryModuleKey()).get(0);\n            battery.changeCurrentEnergyLevel(amount);\n        }\n        else\n        \tthrow new IllegalArgumentException(\"The given agv is not present on this charge location\");\n    }", "comment": "charges the batteries of the given agvrobot if its on the locations station"}, {"path": "./Dataset/funcom_test/5592666.txt", "code": "private void treeSelect(TreeSelectionEvent e) {\n\n    wpTreeNode adpNode;\n\n    TreePath treePath;\n    treePath = e.getNewLeadSelectionPath();\n    if (treePath != null) {\n      adpNode = (wpTreeNode) treePath.getLastPathComponent();\n      Node selNode = adpNode.getNode();\n      int index = domEngine.getIndex(selNode.getParentNode(), selNode);\n    }\n  }", "comment": "tree model listener experimental"}, {"path": "./Dataset/funcom_test/29600497.txt", "code": "private void calculateResidualMemory(List<AppInformation> apps,int[][] I) {\n            int residualMemoryTmp =memoryCapacity;\n            for(int i=0; i< I.length;i++)\n                residualMemoryTmp-=apps.get(i).getMemoryDemand()*I[i][getPosition()];\n            \n            //TODO: What happens if residual memory < 0?\n            residualMemory=residualMemoryTmp;\n        }", "comment": "calculates the amount of memory not assigned to any application instance"}, {"path": "./Dataset/funcom_test/1741129.txt", "code": "private void otherDoEndTagOperations() {\n        //\n        // TODO: code that performs other operations in doEndTag\n        //       should be placed here.\n        //       It will be called after initializing variables,\n        //       finding the parent, setting IDREFs, etc, and\n        //       before calling shouldEvaluateRestOfPageAfterEndTag().\n        //\n    }", "comment": "method called from do end tag"}, {"path": "./Dataset/funcom_test/24244578.txt", "code": "private byte sendRequest(byte[] request, int replyLen) throws IOException {\n\t\tbyte verify = 0; // default of 0 means success\n\t\tif (verifyCommand)\n\t\t\trequest[0] = DIRECT_COMMAND_REPLY;\n\n\t\tbyte[] reply = nxtComm.sendRequest(request,\n\t\t\t\t(request[0] == DIRECT_COMMAND_REPLY ? replyLen : 0));\n\t\tif (request[0] == DIRECT_COMMAND_REPLY) {\n\t\t\tverify = reply[2];\n\t\t}\n\t\treturn verify;\n\t}", "comment": "small helper method to send direct command request to nxt and return"}, {"path": "./Dataset/funcom_test/14624370.txt", "code": "public void testgetCourse() {\n        System.out.println(\"getCourse\");\n        org.gps.types.GpsPosition instance = new org.gps.types.GpsPosition();\n        instance.setCourse(Float.ONE);\n        henson.midp.Float expectedResult = Float.ONE;\n        henson.midp.Float result = instance.getCourse();\n        assertEquals(expectedResult, result);\n        \n    }", "comment": "test of get course method of class org"}, {"path": "./Dataset/funcom_test/35060253.txt", "code": "private HorizontalPanel createRatingPanel( String image, int max ) {\n\t\tfinal HorizontalPanel panel = new HorizontalPanel();\n\t\tfinal RatingDisplay rating = new RatingDisplay(image);\n\t\trating.setRating( 0 );\n\t\trating.setMax( max );\n\t\trating.updateDisplay();\t\t\t\n\t\tfinal Label label = new Label( getRatingLabel( 0, max ) ); \n\t\t\t\t\n\t\t\t\t\n\t\tpanel.add( rating );\n\t\tpanel.add( label );\n\t\treturn panel;\n\t}", "comment": "creates a panel presenting a rating both graphically and textually"}, {"path": "./Dataset/funcom_test/19343524.txt", "code": "public void setFontName(String val) {\n\n      if ((val == null || \"\".equals(val))\n      && (fontName == null || \"\".equals(fontName))) {\n          return;\n      }\n\n      if ((val == null) || (! val.equals(fontName)) || (updateStatus == NULL_INT_VALUE)) {\n           fontName = val;\n           updateStatus = UPDATED;\n      }\n  }", "comment": "this method sets the value of font name"}, {"path": "./Dataset/funcom_test/46586748.txt", "code": "public JButton getProductButton1() {\n        if ( productButton1 == null ) {\n            productButton1 = new JButton();\n            productButton1.setText( \"Pepsi Cola\" );\n            productButton1.setToolTipText( \"Pepsi Cola\" );\n            productButton1.setBorderPainted( true );\n            ImageIcon icon = new ImageIcon(\"icons/pepsibuttonsmall.gif\");\n            productButton1.setIcon( icon );\n        }\n        return productButton1;\n    }", "comment": "this method initializes the field code product button1 code if it is"}, {"path": "./Dataset/funcom_test/40866588.txt", "code": "public Command getOkCommand8() {\n        if (okCommand8 == null) {//GEN-END:|354-getter|0|354-preInit\n            // write pre-init user code here\n            okCommand8 = new Command(\"Ok\", Command.OK, 0);//GEN-LINE:|354-getter|1|354-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|354-getter|2|\n        return okCommand8;\n    }", "comment": "returns an initiliazed instance of ok command8 component"}, {"path": "./Dataset/funcom_test/20377255.txt", "code": "public void getBars() {\n\t\tgetBarsService.getBars(new AsyncCallback<HashMap<Integer, String>>() {\n\n\t\t\tpublic void onSuccess(HashMap<Integer, String> result) {\n\t\t\t\tfor (Integer barVal : result.keySet()) {\n\t\t\t\t\tbar.addItem(result.get(barVal), Integer.toString(barVal));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic void onFailure(Throwable caught) {\n\t\t\t\tcaught.printStackTrace();\n\t\t\t\tbar.addItem(\"-no bars available-\");\n\t\t\t}\n\t\t});\n\t}", "comment": "fills the bar select box with available bars"}, {"path": "./Dataset/funcom_test/35060588.txt", "code": "static public boolean canEditTutorial( UserInfo userInfo, PuzzleInfo puzzleInfo ) {\n\t\tif( !puzzleInfo.isTutorial() ) \n\t\t\treturn false;\n\t\tif( userInfo == null || puzzleInfo.getStatus() != Status.PRIVATE ) \n\t\t\treturn false;\n\t\tif( userInfo.isAdministrator() )\n\t\t\treturn true;\n\t\treturn userInfo.getEmail().equals( puzzleInfo.getAuthorEmail() );\n\t}", "comment": "check if the given tutorial can be edited by the given user"}, {"path": "./Dataset/funcom_test/34426534.txt", "code": "private void actionClear() {\n        isWorking = true;\n        checkOnlyNewCustomers.setSelected(false);\n        checkSinceLastTime.setSelected(false);\n        minCredits.setText(\"\");\n        minVisits.setText(\"\");\n        maxDays.setText(\"\");\n        isWorking = false;\n        actionFilterView();\n    }", "comment": "called when the user presses the clear button"}, {"path": "./Dataset/funcom_test/1227985.txt", "code": "public String toString() {\n        return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n                .append(\"country\", this.country)\n                .append(\"address\", this.address)\n                .append(\"province\", this.province)\n                .append(\"postalCode\", this.postalCode)\n                .append(\"city\", this.city).toString();\n    }", "comment": "returns a multi line string with key value pairs"}, {"path": "./Dataset/funcom_test/21103047.txt", "code": "public void addRule(String path, IXMLAction action) {\n        if (!paths.contains(path)) {\n            paths.add(path);\n        }\n        List list = null;\n        if (!actions.containsKey(path)) {\n            list = new ArrayList();\n            actions.put(path, list);\n        } else {\n            list = (List)actions.get(path);\n        }\n        list.add(action);\n    }", "comment": "adds a rule to the list of rules for the specified path"}, {"path": "./Dataset/funcom_test/28604162.txt", "code": "public void actionPerformed( ActionEvent e) {\n\n      Object source = e.getSource();\n\n      if ((source == _searchButton) || (source == _inputField)) {\n         // search button clicked or Enter key pressed in the input field\n\n         String searchExpression = _inputField.getText();\n\n         SearchType searchType = (SearchType) _queryTypes.getSelectedItem();\n\n         _controller.search(searchExpression, searchType);\n      }\n      else {\n         Debug.TRACE(\"ERROR: Unknown event\");\n      }\n\n   }", "comment": "reacts to events from the i search i button"}, {"path": "./Dataset/funcom_test/19344487.txt", "code": "private void updateLayoutForFile(String pFile) {\n    \tFile f = new File(pFile);\n\t    String recentLayout = recent.getLayoutName(pFile, new File(pFile));\n\n\t    if (recentLayout == null || \"\".equals(recentLayout)) {\n\t    \tgetLayoutSelection().notifyFileNameChanged(pFile);\n\t    } else {\n\t    \tsetLayout(recentLayout);\n\t    \tif (recent.isEditorLaunch()) {\n\t    \t    loadFile(false);\n\t    \t}\n\t    }\n    }", "comment": "get the layoutname for the file"}, {"path": "./Dataset/funcom_test/19348384.txt", "code": "public String getColumnNameLine(List<String> names, String delim, String quote) {\n\t\tStringBuilder buf = new StringBuilder();\n\t\tString currDelim = \"\";\n\t\t\n\t\tfor (int i = 0; i < names.size(); i++) {\n\t           buf.append(currDelim)\n               .append(quote)\n               .append(names.get(i))\n               .append(quote);\n            currDelim = delim;\n\n\t\t}\n\t\t\n\t\treturn buf.toString();\n\t}", "comment": "convert a list of column names into a line"}, {"path": "./Dataset/funcom_test/19498381.txt", "code": "public void testDeltaMachine() throws Exception {\n\t\tfinal IMachineRoot mac = createMachine(\"cnc\");\n\t\tfinal ISCMachineRoot sc = mac.getSCMachineRoot();\n\t\tfinal IPORoot po = mac.getPORoot();\n\n\t\taddVariables(mac, makeSList(\"V1\"));\n\t\taddInvariants(mac, makeSList(\"I1\"), makeSList(\"V1\u2208BOOL\"), true);\n\t\tsaveRodinFileOf(mac);\n\n\t\trunBuilder();\n\n\t\tmac.getVariables()[0].setComment(\"foo\", null);\n\t\tsaveRodinFileOf(mac);\n\n\t\trunBuilderNotChanged(sc, po);\n\t}", "comment": "ensures that the statically checked file of a machine is modified only"}, {"path": "./Dataset/funcom_test/29853719.txt", "code": "public List fetchInsertStatement(List v, String tableName) {\n    List inserts = new ArrayList();\n\n    for (int i = 0; i < v.size(); i++) {\n      Statement\tstmt = (Statement)v.get(i);\n      if (stmt instanceof InsertStatement) {\n\tif ((((InsertStatement)stmt).getIdent()).equals(tableName)) {\n\t  inserts.add((InsertStatement)stmt);\n\t}\n      }\n    }\n    return inserts;\n  }", "comment": "fetch insert statement"}, {"path": "./Dataset/funcom_test/51728301.txt", "code": "public IdentifierTyper cloneTyper() {\n        IdentifierTyper ret = new IdentifierTyper();\n        for (int j = 0; j < entries.size(); j++) {\n            Entry e = (Entry)entries.get(j);\n            ret.addEntry(e.start, e.end, e.var, e.type, e.descr);\n        }\n        return ret;\n    }", "comment": "clones this instance"}, {"path": "./Dataset/funcom_test/40783157.txt", "code": "public void setWorkers(PeerComponent component, String sdfFilePath, ModuleContext context) throws Exception {\n\t\t\n\t\t/*PeerSyncApplicationClient componentClient = new PeerSyncApplicationClient(context);\n\t\tcomponentClient.putOnQueue(new ControlOperationResult());\n\n\t\tcomponentClient.setWorkers(DescriptionFileCompile.compileSDF(TEST_FILES_PATH + sdfFilePath));*/\n\t\t\n\t\tsetWorkers(component, DescriptionFileCompile.compileSDF(TEST_FILES_PATH + sdfFilePath));\n\t}", "comment": "sets workers in a peer according to a sdf file"}, {"path": "./Dataset/funcom_test/40490646.txt", "code": "protected void executeCommand(Command c) {\n        CommandArray ca = (CommandArray) c;\n        if (!(c instanceof CommandArray)) {\n            System.err.println(\"Send \");\n            return;\n        }\n//        led.setOn(ca.getValue(POWER) == ON);\n        led.setRGB((int) ca.getValue(RED), (int) ca.getValue(GREEN), (int) ca.getValue(BLUE));\n\n    }", "comment": "actuates a spotled with power red value green value blue value"}, {"path": "./Dataset/funcom_test/1782954.txt", "code": "private void inferRefreshHeader( String refreshHeader ) {\n        String originalHeader = getHeaderField( \"Refresh\" );\n        // System.err.println(\"original='\"+originalHeader+\"'\\nrefreshHeader='\"+refreshHeader+\"'\");\n        if (originalHeader == null) {\n            _refreshHeader = refreshHeader;\n        }\n    }", "comment": "infer the refresh header"}, {"path": "./Dataset/funcom_test/31788035.txt", "code": "protected void removeSubscriber(Messageable node,String msgClass) {\n        String key=msgClass.intern();\n        ArrayList al=(ArrayList)(getSubTable().get(key));\n        if(al!=null) {\n            int index=al.indexOf(node);\n            if(index>=0) {\n                al.remove(index); } }\n    }", "comment": "remove the specified node from our list of subscribers"}, {"path": "./Dataset/funcom_test/9014716.txt", "code": "public boolean isEmpty() {\n\t\treturn (!isWhitespace() // not whitespace\n\t\t\t\t&& !isStandAlone() // and not standalone\n\t\t\t\t&& (null == super.getValue()) // and no explicit value provided\n\t\t&& ((null == mPage) // and either its not coming from a page\n\t\t// or it is coming from a page and has no value\n\t\t|| ((null != mPage) && (0 > mValueEnd))));\n\t}", "comment": "predicate to determine if this attribute has an equals sign but no value"}, {"path": "./Dataset/funcom_test/45703952.txt", "code": "private JComboBox getFunktieComboBox() {\n\t\tif (funktieComboBox == null) {\n\t\t\tfunktieComboBox = new JComboBox();\n\t\t\tfunktieComboBox.setPreferredSize(new Dimension(31, 20));\n\t\t\tfunktieComboBox.addItem(\"\");\n\t\t\tfunktieComboBox.addItem(\"HS\");\n\t\t\tfunktieComboBox.addItem(\"SR\");\n\t\t\tfunktieComboBox.addItem(\"KB\");\n\t\t\tfunktieComboBox.addItem(\"KA\");\n\t\t\tfunktieComboBox.addItem(\"HJ\");\n\t\t\tfunktieComboBox.addItem(\"JS\");\n\t\t\tfunktieComboBox.addItem(\"TW\");\n\t\t}\n\t\treturn funktieComboBox;\n\t}", "comment": "this method initializes funktie combo box"}, {"path": "./Dataset/funcom_test/22450085.txt", "code": "private void globalSearchForCycles() {\n        Iterator<Node> itAllNodes = this.globNodes.getAllNodesIterator();\n        while (itAllNodes.hasNext()) {\n            Node currNode = itAllNodes.next();\n            if (!this.visited.contains(currNode)) {\n                searchForCyclesFrom(currNode);\n                if (cycleFound()) {\n                    break;\n                }\n            }\n        }\n    }", "comment": "search for cycles restarting the search at unvisited nodes until"}, {"path": "./Dataset/funcom_test/9308836.txt", "code": "public void actionPerformed(ActionEvent e) {\n\t\t\tJFileChooser chooser = new JFileChooser();\n\t\t\tint retval = chooser.showDialog(frame, null);\n\t\t\tif (retval == JFileChooser.APPROVE_OPTION) {\n\t\t\t\tFile theFile = chooser.getSelectedFile();\n\t\t\t\tif (theFile != null) {\n\t\t\t\t\tString[] pluginsFound = new String[1];\n\t\t\t\t\tpluginsFound[0]\n\t\t\t\t\t\t\t = chooser.getSelectedFile().getPath();\n\t\t\t\t\tdoPluginNamingDialog(pluginsFound);\n\t\t\t\t\tdataFileExists = readDataFile();\n\t\t\t\t\tbuildManageMenu();\n\t\t\t\t\tsetToDefaultPlugin();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}", "comment": "attempts to find the plugin at the path specified by the user"}, {"path": "./Dataset/funcom_test/37562306.txt", "code": "public int indexOf (TreeItem item) {\n\t//TODO - make public and add Tree.indexOf(TreeItem) and TreeItem.indexOf(TreeItem)?\n\tcheckWidget ();\n\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);\n\tif (item.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT);\n  return itemList == null? -1: itemList.indexOf(item);\n}", "comment": "searches the receivers list starting at the first item"}, {"path": "./Dataset/funcom_test/22171689.txt", "code": "protected void addIsExponentialPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_EveFunctionTimer_isExponential_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_EveFunctionTimer_isExponential_feature\", \"_UI_EveFunctionTimer_type\"),\n\t\t\t\t TimerPackage.Literals.EVE_FUNCTION_TIMER__IS_EXPONENTIAL,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the is exponential feature"}, {"path": "./Dataset/funcom_test/40686665.txt", "code": "protected void initImplementation(int id) {\n    String appletName = \"javaApp_\" + id;\n\n    javaTag = new HTML();\n    javaTag.setHTML(TAG.replaceAll(\"[{][0][}]\", appletName).replaceAll(\"[{][1][}]\", String.valueOf(id)));\n\n    RootPanel.get().add(javaTag);\n  }", "comment": "adds java applet to the page"}, {"path": "./Dataset/funcom_test/37398799.txt", "code": "public Map getFactoryClasses(String resourceClass) {\n    String namedFactoryKey = \"factories.\" + resourceClass + \".*.class\";\n    Map map = new SequencedHashMap(config.getMap(namedFactoryKey));\n    String defaultFactory =\n      config.get(\"factories.\" + resourceClass + \".default-factory\");\n    map.put(DEFAULT_FACTORY, defaultFactory);\n    return map;\n  }", "comment": "a map with the factory names as its keys the factory class names"}, {"path": "./Dataset/funcom_test/372177.txt", "code": "public Manifest createOuterOneJar(JarPackageData jarPackage) {\n\t\tManifest manifest= createDefault(\"1.0\");\n\t\taddNoneEmptyAttribute(manifest, \"Created-By\", \"FAT-JAR/ONE-JAR Eclipse Plug-In\");\n\t\taddNoneEmptyAttribute(manifest, Attributes.Name.MAIN_CLASS, \"com.simontuffs.onejar.Boot\");\n\t\taddNoneEmptyAttribute(manifest, Attributes.Name.CLASS_PATH, ojBuilder.getManifestClasspath());\n\t\treturn manifest;\n\t}", "comment": "creates outer manifest for one jar"}, {"path": "./Dataset/funcom_test/45780544.txt", "code": "public String readString() throws NumberFormatException, IOException{\n\t\t/** String value **/\n\t\tchar charBuf;\n\t\t//Get the string length\n\t\tlong length = 0;\n\t\t//read stream until : encountered.\n\t\twhile((charBuf = (char)stream.read()) != ':'){\n\t\t\tlength *= 10;\n\t\t\tlength += Long.parseLong(\"\"+charBuf);\n\t\t}\n\t\t//read up to <length> chars from stream\n\t\tString value = new String();\n\t\twhile(length > 0){\n\t\t\tvalue += (char)stream.read();\n\t\t\tlength--;\n\t\t}\n\t\t//return\n\t\treturn value;\n\t}", "comment": "reads a string of the format length string"}, {"path": "./Dataset/funcom_test/19506904.txt", "code": "public void testCopyIntFromSnapshotToSameFile() throws CoreException {\n\t\tIRodinFile rfSource = createRodinFile(\"P/X.test\");\n\t\tIInternalElement rSource = rfSource.getRoot();\n\t\tNamedElement neParent = createNEPositive(rSource, \"parent\", null);\n\t\tNamedElement neSource = createNEPositive(neParent, \"foo\", null);\n\t\trfSource.save(null, false);\n\t\t\n\t\tcopyPositive(neSource.getSnapshot(), neSource, null, \"bar\", false);\n\t}", "comment": "ensures that an internal element snapshot can be copied to the"}, {"path": "./Dataset/funcom_test/42170937.txt", "code": "protected void addByIndexPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_MonthlyOccursModel_byIndex_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_MonthlyOccursModel_byIndex_feature\", \"_UI_MonthlyOccursModel_type\"),\n\t\t\t\t TimeBasedRoutingPackage.Literals.MONTHLY_OCCURS_MODEL__BY_INDEX,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the by index feature"}, {"path": "./Dataset/funcom_test/39936753.txt", "code": "protected void addWcrtPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_TaskResult_wcrt_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_TaskResult_wcrt_feature\", \"_UI_TaskResult_type\"),\n\t\t\t\t Technic_RM_ResponseTimeNBPackage.Literals.TASK_RESULT__WCRT,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the wcrt feature"}, {"path": "./Dataset/funcom_test/44521921.txt", "code": "private Thing sortZGetFirst(Thing top) {\n\t\tif (top.next == null)\n\t\t\treturn top;\n\t\ttop.next = sortZGetFirst(top.next);\n\n\t\tif (top.getZ() <= top.next.getZ()) {\n\t\t\treturn top;\n\t\t}\n        Thing t = top.next;\n        top.next = t.next;\n        t.next = sortZGetFirst(top);\n        return t;\n\t}", "comment": "utility function for sort z"}, {"path": "./Dataset/funcom_test/18252407.txt", "code": "public void open(Table table) {\n\t\tfilterTextfieldsPerColumn.clear();\n\t\tif (!isInitialized) {\n\t        int w = 600, h = 400;\n\t        setSize(w, h);\n\t        setLocation(Math.max(0, parent.getX() + parent.getWidth() / 2 - w / 2),\n\t                    Math.max(0, parent.getY() + parent.getHeight() / 2 - h / 2));\n\t        isInitialized = true;\n\t\t}\n\t\trefresh(table);\n\t\tsetVisible(true);\n\t}", "comment": "opens the editor"}, {"path": "./Dataset/funcom_test/8848428.txt", "code": "public  MyTagMap() throws IOException {\n\t\t\tsuper(new FileInputStream(\"mytagmap.xml\"));\n\t\t\tXmlPeer peer = new XmlPeer(ElementTags.CHUNK, \"SPEAKER\");\n//\t\t\tpeer.addValue(Markup.CSS_KEY_FONTSIZE, \"10\");\n//\t\t\tpeer.addValue(Markup.CSS_KEY_FONTWEIGHT, Markup.CSS_VALUE_BOLD);\n//\t\t\tpeer.addValue(ElementTags.GENERICTAG, \"\");\n\t\t\tput(peer.getAlias(), peer);\n\t\t}", "comment": "constructs a tag map based on an xml file"}, {"path": "./Dataset/funcom_test/29995922.txt", "code": "public void testConvert() {\n\t\tSpeedVec a = new SpeedVec(base.times(2.1), base.times(-3.4), base);\n\t\tSpeedVec b = new SpeedVec(a.toString());\n\t\tSystem.out.println(\"new SpeedVec(\" + a + \")=\" + b);\n\t\tassertEquals(\"Equals\", a, b);\n\t}", "comment": "test conversion between strings and space vectors"}, {"path": "./Dataset/funcom_test/38221972.txt", "code": "private CVariant functionRad(Stack stack) throws CExpressionError {\n    int params = getValue(stack, 0).getInt();\n    checkParamCount(params, 1);\n    return new CSoftVariant(Math.toRadians(getValue(stack, 1).getFloat()));\n  }", "comment": "calculates function rad degrees to radians"}, {"path": "./Dataset/funcom_test/33387504.txt", "code": "public void onResize(int width, int height) {\n    if (textVisible) {\n      int textWidth = DOM.getElementPropertyInt(textElement, \"offsetWidth\");\n      int left = (width / 2) - (textWidth / 2);\n      DOM.setStyleAttribute(textElement, \"left\", left + \"px\");\n    }\n  }", "comment": "this method is called when the dimensions of the parent element change"}, {"path": "./Dataset/funcom_test/17437047.txt", "code": "public void registeNewCommand(GsBaseCommand com) {\n        System.out.println(\"Register New Command '\" + com.getCmdString() + \"'  -   \" + com.getShortDesc());\n        _commands.put(com.getCmdString().toLowerCase(), com);\n        _commandsA.add(com);\n    }", "comment": "registe new command com"}, {"path": "./Dataset/funcom_test/19485834.txt", "code": "public void testContains() {\n\t\tISet S = createExpression(\"{1,2}<| {1|->2, 1|->4, 3|->5}\");\n\t\tassertTrue(S.contains(createMapplet(1,2)));\n\t\tassertFalse(S.contains(createMapplet(3,5)));\n\t\t S = createExpression(\"{1,2}<| %x.(x : 1..10 | 2*x)\");\n\t\tassertTrue(S.contains(createMapplet(2,4)));\n\t\tassertFalse(S.contains(createMapplet(3,6)));\n\t}", "comment": "test method for b"}, {"path": "./Dataset/funcom_test/5441509.txt", "code": "public String toString() {\n        StringBuffer sb = new StringBuffer();\n\n        sb.append(lazyFormatDate(timeStamp));\n\n        if (myMessage != null) {\n            sb.append(myMessage);\n\n            if (myThrowable != null) {\n                sb.append(System.getProperty(\"line.separator\"));\n            }\n        }\n\n        if (myThrowable != null) {\n            sb.append(Log.getStackTrace(myThrowable));\n        }\n\n        return sb.toString();\n    }", "comment": "returns a string representation of this event"}, {"path": "./Dataset/funcom_test/17437051.txt", "code": "public String GetHelpStr(String Com) {\n        System.out.println(\"try gethelp  for: '\" + Com + \"'\");\n        GsBaseCommand commandToExecute = (GsBaseCommand) _commands.get(Com);\n        if (commandToExecute == null) {\n            return Com + \": Command not exist!!!\";\n        }\n        return commandToExecute.getHelpToCommand();\n    }", "comment": "get help string for selected command"}, {"path": "./Dataset/funcom_test/23010377.txt", "code": "private JScrollPane getJScrollPaneInPutPort() {\n\t\tif (jScrollPaneInPutPort == null) {\n\t\t\tjScrollPaneInPutPort = new JScrollPane();\n\t\t\tjScrollPaneInPutPort.setBounds(new Rectangle(16, 150, 305, 134));\n\t\t\tjScrollPaneInPutPort.setViewportView(getTxtInputPort());\n\t\t}\n\t\treturn jScrollPaneInPutPort;\n\t}", "comment": "this method initializes j scroll pane in put port"}, {"path": "./Dataset/funcom_test/8474866.txt", "code": "public void stateChanged(ChangeEvent e) {\n\t\ttitle.setText(model.getTitle());\n\t\turl.setText(model.getURL());\n\t\tdepthCount.setText(safeToString(model.getDepth()));\n\t\tinOutLinks.setText(safeToString(model.getInLinkCount())+\" / \"+safeToString(model.getOutLinkCount()));\n\t}", "comment": "method to detect state changes"}, {"path": "./Dataset/funcom_test/29988731.txt", "code": "private void setDefaultMessage() {\n\n        clearParent();\n\n        // add message\n        String message = Messages.getString(\"SQLResultsView.NoResults\");\n        Label label = new Label(_parent, SWT.FILL);\n        label.setText(message);\n        label.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n\n        _parent.layout();\n        _parent.redraw();\n    }", "comment": "set a default message this method is called when no results are"}, {"path": "./Dataset/funcom_test/22916385.txt", "code": "public boolean getAutoCommit() throws SQLException {\n      //throw new UnsupportedOperationException(\"Connection.getAutoCommit() unsupported\");\n      return false; // at present this is just a read only driver: you can't do update/insert operations -> it\n      \t\t\t\t  // makes no sense giving the chance to set auto commit, so this is always false\n   }", "comment": "retrieves the current auto commit mode for this code connection code"}, {"path": "./Dataset/funcom_test/33793338.txt", "code": "public void testGetFornecedor() {\n        /*System.out.println(\"getFornecedor\");\n        Integer id = 151;\n        FornecedorDAO instance = new FornecedorDAO();\n        //Fornecedor expResult = null;\n        Fornecedor result = instance.getFornecedor(id);\n        assertNotNull(result);\n        // TODO review the generated test code and remove the default call to fail.\n        //fail(\"The test case is a prototype.\");*/\n    }", "comment": "test of get fornecedor method of class fornecedor dao"}, {"path": "./Dataset/funcom_test/12283997.txt", "code": "public ScreenConfiguration getDescriptor(String iName) {\n\t\tScreenConfiguration descr;\n\n\t\tsynchronized (this) {\n\t\t\tdescr = getConfiguration(iName);\n\t\t\tif (descr == null) {\n\t\t\t\t// LOAD FROM DESCRIPTOR\n\t\t\t\tdescr = loadDescriptor(iName);\n\t\t\t\tif (descr != null) {\n\t\t\t\t\taddConfiguration(iName, descr);\n\n\t\t\t\t\t// REGISTER DESCRIPTOR FILE TO BE WAKED UP ON RELOADING\n\t\t\t\t\tRoma.component(AutoReloadManager.class).addResource(descr.getFile(), this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn descr;\n\t}", "comment": "get a desktop descriptor"}, {"path": "./Dataset/funcom_test/16776878.txt", "code": "public void createDefaultPdfs(Uncertainties uncertainties) {\n\t\tfor (int n = 0; n < uncertainties.variationFunctionCount(); n++) {\n\t\t\tVariation variationFunction = uncertainties.getVariationFunction(n);\n\n        \t//create new UncertainItem.\n            UncertainItem uncertainItem = variationFunction.getUncertainItem().clone();\n\n\t    \t//create new default pdf.\n\t        PDF pdf = new NormalDistribution();\n\t        pdf.setUncertainItem(uncertainItem);\n\t        uncertainties.addPdf(pdf);\n\t\t}\n    }", "comment": "creates default pdfs for all the uncertain items that are present"}, {"path": "./Dataset/funcom_test/25725041.txt", "code": "public List getMaximaFromChildren(String name, String per) {\n\t\tList maxes = new ArrayList();\n\t\tfor (Iterator i = getChildren().iterator(); i.hasNext();) {\n\t\t\tAbstractMetricSource next = (AbstractMetricSource)i.next();\n\t\t\tMax nextMax = next.getMaximum(name, per);\n\t\t\tif (nextMax != null) {\n\t\t\t\tmaxes.add(nextMax);\n\t\t\t}\n\t\t}\n\t\treturn maxes;\n\t}", "comment": "calculate maximum of metrics defined in this nodes children with the"}, {"path": "./Dataset/funcom_test/38531514.txt", "code": "public void clearNamespaces() throws org.xmldb.api.base.XMLDBException {\n        try {\n            stub.clearNamespaces(this.service);\n        } catch (java.rmi.RemoteException e){\n            throw new org.xmldb.api.base.XMLDBException(org.xmldb.api.base.ErrorCodes.VENDOR_ERROR, e);\n        }\n        \n    }", "comment": "clears the name space"}, {"path": "./Dataset/funcom_test/19487757.txt", "code": "public void verifyPredicateSignature(final SMTPredicateSymbol symbol) {\n\t\tfor (final SMTPredicateSymbol predSymbol : preds) {\n\n\t\t\t// Verify if the predicates have the same name\n\t\t\tif (symbol.getName().equals(predSymbol.getName())) {\n\n\t\t\t\tif (verifyRank(symbol.getArgSorts(), predSymbol.getArgSorts())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Predicate \" + symbol\n\t\t\t\t+ \" is not declared in the signature.\");\n\t}", "comment": "checks if the actual predicate symbol has the same rank of the"}, {"path": "./Dataset/funcom_test/38531670.txt", "code": "public void testSetUrlString() throws Exception {\n        System.out.println(\"testSetUrlString\");\n        \n        // TODO add your test code below by replacing the default call to fail.\n        UrlHandler handler = new UrlHandler();\n        handler.setUrlString(\"http://www.eatmutton.com/index.html\");\n    }", "comment": "test of set url string method of class gov"}, {"path": "./Dataset/funcom_test/7957602.txt", "code": "protected void print() {\n\t\t\tSystem.out.println(\"Print for \" + prototype + \"------------------\");\n\n\t\t\tcfg.visit(new PrintVisitor() {\n\t\t\t\tPhi phi = null;\n\n\t\t\t\tpublic void visitBlock(final Block block) {\n\t\t\t\t\tphi = exprPhiAtBlock(block);\n\t\t\t\t\tsuper.visitBlock(block);\n\t\t\t\t}\n\n\t\t\t\tpublic void visitLabelStmt(final LabelStmt stmt) {\n\t\t\t\t\tsuper.visitLabelStmt(stmt);\n\n\t\t\t\t\tif (stmt.label().startsBlock()) {\n\t\t\t\t\t\tif (phi != null) {\n\t\t\t\t\t\t\tprintln(phi);\n\t\t\t\t\t\t\tphi = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tSystem.out.println(\"End Print ----------------------------\");\n\t\t}", "comment": "print a textual description of this expr info"}, {"path": "./Dataset/funcom_test/24447409.txt", "code": "public void actionPerformed(ActionEvent ae) {\n\t    \t//JOptionPane.showMessageDialog(null, \"CytoscapeSQL test\", \"CytoscapeSQL test\", JOptionPane.WARNING_MESSAGE);\n\t    \t\n\t    \t// Connect to the given database\n\t\t\tConnectSQLite.testConnection();\n\t\t\tConnectSQLite.getDataFromTable(\"xref\");\n\t\t\t\n\t\t\t// Test the postgres connection\n\t\t\tHepatoCoreInfo hcInfo = new HepatoCoreInfo(\"15926\");\n\t\t\thcInfo.printInfo();\n\t\t\t\n\t    }", "comment": "this method is called when the user selects the menu item"}, {"path": "./Dataset/funcom_test/19469549.txt", "code": "public UMLBtype basicGetType() {\n\t\tif (getTranslation()==translationKind.STATE_SETS){\n\t\t\tif (eContainer() instanceof UMLBClass){\n\t\t\t\treturn ((UMLBtype) eContainer()).getType();\n\t\t\t}else{\n\t\t\t\tUMLBProject p = (UMLBProject) this.getContaining(UMLBPackage.eINSTANCE.getUMLBProject());\n\t\t\t\tfor (UMLBTypeExpression te : p.getTypeExpressions()){\n\t\t\t\t\tif (te.getName().equals(\"BOOL\")){\n\t\t\t\t\t\treturn te;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tUMLBTypeExpression te = UMLBFactory.eINSTANCE.createUMLBTypeExpression();\n\t\t\t\tte.setName(\"BOOL\");\n\t\t\t\treturn te;\n\t\t\t}\n\t\t}else\n\t\t\treturn this;\n\t}", "comment": "statemachines with translation kind functional are types umlbtype so just return this instance"}, {"path": "./Dataset/funcom_test/28953900.txt", "code": "private Object getObjectInstance(Class c) throws Exception {\n        Object ret = null;\n        try {\n            //try new instance first\n            ret = c.newInstance();\n        } catch (InstantiationException e) {\n           //try getInstance() method\n            Method method = c.getMethod(\"getInstance\");\n            ret = method.invoke(null);\n        }\n        return ret;\n    }", "comment": "get an instance of a class"}, {"path": "./Dataset/funcom_test/3986270.txt", "code": "private void loadFingerPrintFromInputStream(InputStream is) {\n\t\tentries = new TreeSet<Entry<String, Integer>>(\n\t\t\t\tnew NGramEntryComparator());\n\t\tMyProperties properties = new MyProperties();\n\t\tproperties.load(is);\n\t\tfor (Entry<String, String> entry : properties.entrySet()) {\n\t\t\tthis.put(entry.getKey(), Integer.parseInt(entry.getValue()));\n\t\t}\n\t\tentries.addAll(this.entrySet());\n\t}", "comment": "reads a finger print from the passed input stream"}, {"path": "./Dataset/funcom_test/19486430.txt", "code": "public void testSUBSET1() {\n\t\tString chaine = new PreParser(new StringReader(\"\"))\n\t\t\t\t.process(\"{3} <<: {1,3,4}\");\n\n\t\tIParseResult result = FormulaFactory.getDefault()\n\t\t\t\t.parsePredicate(chaine,LanguageVersion.LATEST,null);\n\n\t\tassertTrue(!result.hasProblem());\n\n\t\tPredicate predicate = result.getParsedPredicate();\n\n\t\tGlobalIdentTable<IExpression> table = new GlobalIdentTable<IExpression>();\n\n\t\tPredicatBuilder builder = new PredicatBuilder(table);\n\n\t\tassertTrue(predicate.accept(builder));\n\n\t\tIPredicate predC = builder.getPredicate();\n\n\t\tassertEquals(true, predC.isHold());\n\n\t}", "comment": "test inclusion stricte cas vrai"}, {"path": "./Dataset/funcom_test/35060076.txt", "code": "public void setPuzzleKey(String puzzleKey) {\n\t\tif( (puzzleKey == null  && this.puzzleKey != null) ||\n\t\t\t!puzzleKey.equals( this.puzzleKey ) || \n\t\t\ttutorial ) {\n\t\t\ttutorial = false;\n\t\t\tthis.puzzleKey = puzzleKey;\n\t\t\tpuzzleInfo = null;\n\t\t\thistoryInfo = null;\n\t\t\tsetChanged();\n\t\t\n\t\t\tif( puzzleKey != null ) {\t\t\n\t\t\t\tPuzzleServiceAsync puzzleService = ServiceFactory.getPuzzleService();\n\t\t\t\trefreshing = true;\n\t\t\t\tpuzzleService.loadPuzzle( puzzleKey, puzzleInfoCallback  );\n\t\t\t}\n\t\t}\n\t}", "comment": "associates a puzzle key with this model"}, {"path": "./Dataset/funcom_test/45958868.txt", "code": "public String getMobileNumberOfFirstEmployment() {\n    String mobileNumber = \"\";\n\n    if (this.employments != null && this.employments.size() > 0 && this.employments.get(0).getMobileTelephoneNumber() != null) {\n      mobileNumber = this.employments.get(0).getMobileTelephoneNumber().getPhoneNumber();\n    }\n\n    return mobileNumber;\n  }", "comment": "getter for the mobile number of the persons first employment"}, {"path": "./Dataset/funcom_test/20561721.txt", "code": "public void setRlmiFile(File rlmi) {\n\t\n\tnotifyBody = \"--\" + boundary +\"\\n\" +\n\t    \"Content-Transfer-Encoding: binary\\n\" +\n\t    \"Content-ID: <\" + mainCid + \">\\n\" +\n\t    \"Content-Type: application/rlmi+xml\\n\" + \n\t    //parseRlmi(rlmi) + \n\t    \"\\n--\" + boundary;\n    }", "comment": "simply takes the resource list and adds attributes"}, {"path": "./Dataset/funcom_test/19521449.txt", "code": "public Record getExtendedRecord() {\n\t\tif (extendedRecord != null && extendedRecord.eIsProxy()) {\n\t\t\tInternalEObject oldExtendedRecord = (InternalEObject) extendedRecord;\n\t\t\textendedRecord = (Record) eResolveProxy(oldExtendedRecord);\n\t\t\tif (extendedRecord != oldExtendedRecord) {\n\t\t\t\tif (eNotificationRequired()) {\n\t\t\t\t\teNotify(new ENotificationImpl(this, Notification.RESOLVE, RecordsPackage.RECORD_EXTENSION__EXTENDED_RECORD, oldExtendedRecord,\n\t\t\t\t\t\t\textendedRecord));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn extendedRecord;\n\t}", "comment": "begin user doc returns the actual record if it exists i"}, {"path": "./Dataset/funcom_test/39455191.txt", "code": "private double newError(List<AlignStructMol> data) throws Exception {\n\n                double numT = 1;\n                for (int i = 0; i < data.size(); i++) {\n                        if (data.get(i).ransacAlsoInLiers || data.get(i).ransacMaybeInLiers) {\n                                numT++;\n                        }\n                }\n                return 1 / numT;\n\n        }", "comment": "calculate the error in the model"}, {"path": "./Dataset/funcom_test/27867839.txt", "code": "public void verifyInputForward() {\n        if (logger.isDebugEnabled())\n            logger.debug(\"Entering\");\n        init();\n        Common.verifyForwardPath(request.getPathInfo(),null,getActualForward(),true,request,config.getServletContext(),config);\n        if (logger.isDebugEnabled())\n            logger.debug(\"Exiting\");\n    }", "comment": "verifies if the action servlet controller forwarded to the defined"}, {"path": "./Dataset/funcom_test/19471333.txt", "code": "public boolean validateUMLBabstractState_oneOutgoingFromSalmiakki(UMLBabstractState umlBabstractState, DiagnosticChain diagnostics, Map<Object, Object> context) {\n\t\tif (umlBabstractState.isSalmiakki() && umlBabstractState.getOutgoing().size()!=1) {\n\t\t\tif (diagnostics != null) {\n\t\t\t\tdiagnostics.add\n\t\t\t\t\t(new BasicDiagnostic\n\t\t\t\t\t\t(Diagnostic.ERROR,\n\t\t\t\t\t\t UMLBValidator.DIAGNOSTIC_SOURCE,\n\t\t\t\t\t\t UMLBValidator.UML_BABSTRACT_STATE__ONE_OUTGOING_FROM_SALMIAKKI,\n\t\t\t\t\t\t \"There must be exactly one outgoing branch from an OR pseudo-state\",\n\t\t\t\t\t\t new Object [] { umlBabstractState }));\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}", "comment": "validates the one outgoing from salmiakki constraint of em uml babstract state em"}, {"path": "./Dataset/funcom_test/13858490.txt", "code": "public void instanceSelected(DbInstance dbi) {\n\t\tif (dbi == null) {\n\t\t\tlog.warn(\"Selecting null instance ????\");\n\t\t\treturn;\n\t\t}\n\t\tint oldState = DbState.NO_INSTANCE_SELECTED_STATE;\n\t\tif (current != null) {\n\t\t\tcurrent.getInformations().removePropertyChangeListener(\"state\",\n\t\t\t\t\tthis);\n\t\t\toldState = current.getInformations().getState();\n\t\t}\n\n\t\tcurrent = dbi;\n\t\tcurrent.getInformations().addPropertyChangeListener(\"state\", this);\n\t\tsetCommandState(oldState, dbi.getInformations().getState());\n\t}", "comment": "when the instance selected in the dbi list changes the controller will"}, {"path": "./Dataset/funcom_test/38892986.txt", "code": "public void registerListeningInActiveDatabase() {\n    for (int i = 0; i < 8; ++i) {\n      DataElement elem = DatabaseApp.ACTIVE.getDataElement(databaseIDs[i]);\n\n      if ((elem != null) && (elem instanceof DigitalInput)) {\n        // We want to be the owner of this digital input\n        elem.setDataRequestListener(this);\n      }\n    }\n  }", "comment": "register us as"}, {"path": "./Dataset/funcom_test/5441019.txt", "code": "public void setId(String anID) {\n        if (idSet) {\n            throw new IllegalStateException(localStrings.getString(\"session_id_already_set\"));\n        }\n        id = anID;\n        sessionContext.addSession(this);\n        setMaxInactiveInterval(sessionContext.getDefaultMaxInactiveInterval());\n    }", "comment": "sets the identifier of this session"}, {"path": "./Dataset/funcom_test/22407276.txt", "code": "public void writeChildrenXML(final XMLWriter writer) throws IOException {\n        final NodeList children = getChildNodes();\n\n        for (int i = 0; i < children.getLength(); i++) {\n            final Node child = children.item(i);\n            if (child instanceof XMLWritable) {\n                final XMLWritable writable = (XMLWritable) child;\n                writable.writeXML(writer);\n            }\n        }\n    }", "comment": "used to write any children of a node"}, {"path": "./Dataset/funcom_test/38531616.txt", "code": "public boolean isOpen() throws org.xmldb.api.base.XMLDBException {\n        try {\n            return this.stub.isOpen(this.collectionTransport);\n        } catch (java.rmi.RemoteException e){\n            throw new org.xmldb.api.base.XMLDBException(org.xmldb.api.base.ErrorCodes.VENDOR_ERROR, e);\n        }\n        \n    }", "comment": "determines if this collection is open"}, {"path": "./Dataset/funcom_test/23389549.txt", "code": "public void run() {\n\t\tString msg;\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tmsg = in.readLine();\n\t\t\t\tif(msg==null) throw new IOException();\n\t\t\t\tSystem.out.println(\"<- \"+msg);\n\t\t\t\thandleMessageFromServer(msg);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tif (!exit) {\n\t\t\t\tcloseAll();\n\t\t\t\tclient.print(\"ERROR: Connection to server lost. Use the connect command to reconnect.\");\n\t\t\t\tclient.connectionClosed();\n\t\t\t}\n\t\t}\n\t}", "comment": "waits for messages from the server"}, {"path": "./Dataset/funcom_test/42170946.txt", "code": "protected void addDayPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_MonthlyOccursModel_day_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_MonthlyOccursModel_day_feature\", \"_UI_MonthlyOccursModel_type\"),\n\t\t\t\t TimeBasedRoutingPackage.Literals.MONTHLY_OCCURS_MODEL__DAY,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the day feature"}, {"path": "./Dataset/funcom_test/49866813.txt", "code": "public Cursor fetchChecklistItem(long itemId) {\n    Cursor cursor = mDb.query(true, CHECKLIST_ITEM_TBL, new String[] {KEY_ROWID, KEY_LIST_ID, KEY_IS_DONE, KEY_ITEM},\n        KEY_ROWID + \"=\" + itemId, null, null, null, null, null);\n    if (cursor != null) {\n      cursor.moveToFirst();\n    }\n    return cursor;\n  }", "comment": "retrieves the specified checklist item"}, {"path": "./Dataset/funcom_test/19463492.txt", "code": "private boolean boundIdentDecsMatch(BoundIdentDecl[] formulaDecs, BoundIdentDecl[] patternDecs){\n\t\tif(formulaDecs.length == patternDecs.length){\n\t\t\tint index = 0;\n\t\t\tfor(BoundIdentDecl pDec: patternDecs){\n\t\t\t\tBoundIdentDecl fDec = formulaDecs[index];\n\t\t\t\tif(!ProverUtilities.canUnifyTypes(fDec.getType(), pDec.getType())){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse \n\t\t\treturn false;\n\t}", "comment": "todo fixme this is incomplete"}, {"path": "./Dataset/funcom_test/33719277.txt", "code": "public void testGetEndTime() {\n        System.out.println(\"getEndTime\");\n        \n        Event_DBImpl instance = new Event_DBImpl();\n        \n        String expResult = \"\";\n        String result = instance.getEndTime();\n        assertEquals(expResult, result);\n        \n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of get end time method of class com"}, {"path": "./Dataset/funcom_test/36405216.txt", "code": "private void applyChangeCase(StyleWithProperties style, boolean bInherit, BeforeAfter ba) {\n        if (style==null) { return; }\n        if (bIgnoreAll) { return; }\n        String s = changeCase(style.getProperty(XMLString.FO_TEXT_TRANSFORM));\n        if (s!=null) { ba.add(s+\"{\",\"}\"); }\n    }", "comment": "p apply change case"}, {"path": "./Dataset/funcom_test/46796178.txt", "code": "private void terminated() {\n\t\t// delete all threads\n\t\tIterator iter = threadList.values().iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tEmonicThread thread = (EmonicThread)iter.next();\n\t\t\tthread.fireTerminateEvent();\n\t\t}\n\t\tthreadList = new HashMap();\n\t\t\n\t\tDebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);\n\t\tfireTerminateEvent();\n\t\tDebuggerPlugin.getDefault().returnPort(port);\n\t\t// this terminates the input reader job\n\t\ttry {\n\t\t\tstdin.close();\n\t\t} catch (IOException e) {\n\t\t\t// ignored\n\t\t}\n\t}", "comment": "called when this debug target terminates"}, {"path": "./Dataset/funcom_test/37121669.txt", "code": "public void setItemName(String itemName) {\n\n        if ((itemName == null) || (itemName == \"\")) {\n            throw new IllegalArgumentException(\"null or empty item name\");\n        }\n\n        this.itemName = itemName;\n        this.textArea.setText(\"Remove the item?\\n\" + itemName);\n    }", "comment": "sets the name of the item to remove"}, {"path": "./Dataset/funcom_test/22075812.txt", "code": "private ModsModsDocument extractDSMODS() throws PackagerException {\n\t\tModsModsDocument mods = null;\n\t\tXmlObject xobj[] = dspacemets.selectPath(\"declare namespace mods='\"\n\t\t\t\t+ METSProfile.MODS_NS + \"'; //mods:mods\");\n\t\tif (xobj.length > 0) {\n\t\t\ttry {\n\t\t\t\tmods = ModsModsDocument.Factory.parse(xobj[0].getDomNode());\n\t\t\t} catch (XmlException e) {\n\t\t\t\tthrow new PackagerException(\n\t\t\t\t\t\t\"Problem parsing MODS document from DSpace \"\n\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn mods;\n\t}", "comment": "pulls out the mods that is embedded in the dspace mets export"}, {"path": "./Dataset/funcom_test/20951083.txt", "code": "private StringBuilder createTableDef(ThsTable table) {\n\t\tString tableName = table.getName();\n\t\tStringBuilder sb = new StringBuilder(tableName);\n\t\tsb.append('|');\n\n\t\tList<? extends ThsColumn> columns = table.getColumns();\n\t\tfor (int i = 0; i < columns.size(); i++) {\n\t\t\tThsColumn column = columns.get(i);\n\n\t\t\tchar type = valueTypeToSymbol(column.getType());\n\n\t\t\tsb.append(column.getName()).append(',')\n\t\t\t  .append(type).append(',')\n\t\t\t  .append(column.getLen());\n\n\t\t\tif (i < columns.size() - 1) sb.append(';');\n\t\t}\n\n\t\treturn sb;\n\t}", "comment": "get table definition for def file"}, {"path": "./Dataset/funcom_test/16368606.txt", "code": "//  private void createFolderHelper(IFolder folder, IProgressMonitor monitor) throws CoreException {\n//    if (!folder.exists()) {\n//      IContainer parent = folder.getParent();\n//      if (parent instanceof IFolder && (!((IFolder) parent).exists()))\n//        createFolderHelper((IFolder) parent, monitor);\n//      folder.create(false, true, monitor);\n//    }\n//  }", "comment": "helper method it recursively creates a folder path"}, {"path": "./Dataset/funcom_test/41253961.txt", "code": "private double computeWeight(int occurrence_cnt) {\n\t\tDouble weight = 0.0;\n\t\tif (occurrence_cnt!=0) {\n\t\t\t// compute weight\n\t\t\tif (occurrence_cnt>THRESHOLDS.get(3)) {\n\t\t\t\tweight=1.0;\n\t\t\t} else if (occurrence_cnt>THRESHOLDS.get(2)) {\n\t\t\t\tweight=.75;\n\t\t\t} else if (occurrence_cnt>THRESHOLDS.get(1)) {\n\t\t\t\tweight=.5;\n\t\t\t} else {\n\t\t\t\tweight=.25;\n\t\t\t}\n\t\t}\n\t\treturn weight;\n\t}", "comment": "computes a weight in 0 1 from the number of occurences"}, {"path": "./Dataset/funcom_test/26286147.txt", "code": "public Dimension getPreferredSize() {\n        if(isPreferredSizeSet())\n            return super.getPreferredSize();\n        FontMetrics fm = getFontMetrics(getFont());\n        return new Dimension ((statusText==null?0:fm.stringWidth(statusText)) + 5, fm.getHeight() + 8);\n    }", "comment": "overrides the size from the super"}, {"path": "./Dataset/funcom_test/13483742.txt", "code": "public void replace(int depth, Expr expr) {\n        for (int i = stack.size() - 1; i >= 0; i--) {\n            Expr top = (Expr) stack.get(i);\n\n            if (depth == 0) {\n                stack.set(i, expr);\n                return;\n            }\n\n            depth -= top.type().getSize();\n        }\n\n        throw new IllegalArgumentException(\"Can't replace below stack bottom.\");\n    }", "comment": "replaces the expression that is depth expressions from the top of the"}, {"path": "./Dataset/funcom_test/18523035.txt", "code": "private ITestStep fromFormInput(FormInput fi) {\n\t\tif (fi instanceof ButtonInput || fi instanceof SubmitInput) {\n\t\t\treturn null;\n\t\t}\n\t\tString name = fi.getElement().getName();\n\t\tString setInputField = \"setFormElementWithLabel(\\\"\" +name + \"\\\",\\\"\" +\n\t\t\tfi.getValue() +\"\\\");\\n\";\n\t\t\n\t\treturn new TestStep(setInputField);\n\t}", "comment": "converts a form input to a j web unit step"}, {"path": "./Dataset/funcom_test/45550275.txt", "code": "public void write(IPropertyStore store) {\n        store.setProperty(property + PROPERTY_PUBLIC, includePublic);\n        store.setProperty(property + PROPERTY_PACKAGE, includePackage);\n        store.setProperty(property + PROPERTY_PROTECTED, includeProtected);\n        store.setProperty(property + PROPERTY_PRIVATE, includePrivate);\n    }", "comment": "write scope preferences to a property store"}, {"path": "./Dataset/funcom_test/48715493.txt", "code": "private void populateVertexDependencies(Vertex vertex) {\n        \n        Assert.notNull(vertex, \"vertex cannot be null\");\n        \n        final ModuleDefinition moduleDefinition = vertex.getModuleDefinition();\n        \n        populateDependencies(vertex, moduleDefinition, false);\n        populateDependencies(vertex, moduleDefinition, true);\n    }", "comment": "sets up the dependencies for a particular named module"}, {"path": "./Dataset/funcom_test/40788945.txt", "code": "public TransportCandidate getBestRemoteCandidate() {\n            // Hopefully, we only have one validRemoteCandidate\n            ArrayList cands = getValidRemoteCandidatesList();\n            if (!cands.isEmpty()) {\n                LOGGER.debug(\"RAW CAND\");\n                return (TransportCandidate) cands.get(0);\n            } else {\n                LOGGER.debug(\"No Remote Candidate\");\n                return null;\n            }\n        }", "comment": "obtain the best common transport candidate obtained in the"}, {"path": "./Dataset/funcom_test/12533698.txt", "code": "public TransportLocationIfc getLocationWithMostIdleTrailers(Collection<LaneIfc> lanes, double distance){\n\t\tTransportLocationIfc mLoc = null;\n\t\tint max = 0;\n\t\tfor(LaneIfc lane: lanes){\n\t\t\tif (lane.getDistance() <= distance){\n\t\t\t\tTransportLocationIfc dest = lane.getDestination();\n\t\t\t\tint nt = getNumIdleTrailers(dest);\n\t\t\t\tif (nt > max){\n\t\t\t\t\tmax = nt;\n\t\t\t\t\tmLoc = dest;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn(mLoc);\n\t}", "comment": "from a collection of lanes return a destination that has the most idle"}, {"path": "./Dataset/funcom_test/34425578.txt", "code": "public String setText(String str) {\n        if (str != null) {\n            synchronized (content) {\n                try {\n                    File f = file();\n                    f.getParentFile().mkdirs();\n\n                    ZWriter.writeExc(str, f, false);\n                } catch (Throwable e) {\n                    SWGAide.printError(\"SWGNotes:setText: \" + file, e);\n                    return e.getMessage();\n                }\n            }\n        }\n        return null;\n    }", "comment": "sets the text of this instance to the file for this instance"}, {"path": "./Dataset/funcom_test/40936549.txt", "code": "public double getAlphaE() {\n        final double epsilon   = Math.sqrt(1 - ex * ex - ey * ey);\n        final double cosAlphaV = Math.cos(alphaV);\n        final double sinAlphaV = Math.sin(alphaV);\n        return alphaV + 2 * Math.atan((ey * cosAlphaV - ex * sinAlphaV) /\n                                      (epsilon + 1 + ex * cosAlphaV + ey * sinAlphaV));\n    }", "comment": "get the eccentric longitude argument"}, {"path": "./Dataset/funcom_test/34426855.txt", "code": "public void editMenuRemove(JMenuItem menuItem) {\n        if (menuItem == null || menuItem.getText().equals(\"-=-\"))\n            return;\n        editMenu.remove(menuItem);\n        if (editMenu.getMenuComponents().length == 0)\n            editMenu.setEnabled(false);\n    }", "comment": "removes code menu item code from the edit menu"}, {"path": "./Dataset/funcom_test/12533129.txt", "code": "public CoordinateIfc getCoordinate(double lat, double lon, double x3) {\n\t\tif (Math.abs(lat) > 90.0)\n\t\t\tthrow new IllegalArgumentException(\"The latitude must be in range [-90, 90] degrees\");\n\t\tif (Math.abs(lon) > 180.0)\n\t\t\tthrow new IllegalArgumentException(\"The latitude must be in range [-180, 180] degrees\");\n\t\t\n\t\tVector3D v = new Vector3D(lat, lon);\n\t\treturn(v);\n\t}", "comment": "returns a valid coordinate"}, {"path": "./Dataset/funcom_test/21073719.txt", "code": "protected void appendSlotValue(StringBuffer result, Slot slot){\n\t\tfor (Iterator values = slot.getValues().iterator(); values.hasNext();){\n\t\t\tValueSpecification next = (ValueSpecification)values.next();\n\t\t\tString nextDisplayValue = getSlotValue(next);\n\t\t\tif (!isEmpty(nextDisplayValue)){\n\t\t\t\tresult.append(\" = \").append(nextDisplayValue);\n\t\t\t\t//FIXME: for now stop on first success\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}", "comment": "fixme it is unclear from the spec how multiple values should be shown"}, {"path": "./Dataset/funcom_test/34427725.txt", "code": "private void displayDraft(SWGSchematic schem) {\n        draftTitle.setTitle(schem.getName());\n        draftCategory.setText(draftDataCategory(schem));\n        draftData.setText(draftData(schem));\n        draftResAndComps(schem);\n        draftExpGroups(schem);\n        draftMisc.setText(draftMisc(schem));\n        draftPanel.repaint();\n    }", "comment": "helper method which updates the display for the draft details"}, {"path": "./Dataset/funcom_test/28953881.txt", "code": "public void addName(String name, boolean isRequired) throws XdsRimException, SOAPException {\n        if (name != null) {\n            addRimNameElement(root, name, rimNameSpace);\n        } else if (isRequired) {\n            throw new XdsRimException(\"Required Name not supplied.\");\n        }\n    }", "comment": "add a name to this eb rim object"}, {"path": "./Dataset/funcom_test/19506915.txt", "code": "public void testCopyIntNoop() throws CoreException {\n\t\tIRodinFile rfSource = createRodinFile(\"P/X.test\");\n\t\tIInternalElement rSource = rfSource.getRoot();\n\t\tNamedElement neParent = createNEPositive(rSource, \"parent\", null);\n\t\tNamedElement neSource = createNEPositive(neParent, \"foo\", null);\n\t\tcreateNEPositive(neSource, \"bar\", null);\n\n\t\tcopyNoop(neSource, null);\n\t}", "comment": "ensures that copying an internal element to itself is a no op"}, {"path": "./Dataset/funcom_test/20787032.txt", "code": "public void setMaxResultSetSize(int maxResultSetSize) {\n      int oldValue = maxResultSetSize;\n      this.maxResultSetSize = maxResultSetSize;\n      propertyChangeSupport.firePropertyChange(PROPERTY_MAX_RESULT_SET_SIZE,\n            oldValue, maxResultSetSize);\n   } // setMaxResultSetSize", "comment": "sets the maximal result set size"}, {"path": "./Dataset/funcom_test/10893420.txt", "code": "public StandardServer getServer() {\n        \n        if (server != null) {\n            return server;\n        }\n        \n        initBaseDir(); \n        \n        System.setProperty(\"catalina.useNaming\", \"false\");\n        \n        server = new StandardServer();\n        server.setPort( -1 );\n        \n        service = new StandardService();\n        service.setName(\"Tomcat\");\n        server.addService( service );\n        return server;\n    }", "comment": "get the server object"}, {"path": "./Dataset/funcom_test/40865383.txt", "code": "public Command getBackCommand12() {\n        if (backCommand12 == null) {//GEN-END:|264-getter|0|264-preInit\n            // write pre-init user code here\n            backCommand12 = new Command(\"OK\", Command.BACK, 0);//GEN-LINE:|264-getter|1|264-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|264-getter|2|\n        return backCommand12;\n    }", "comment": "returns an initiliazed instance of back command12 component"}, {"path": "./Dataset/funcom_test/28876958.txt", "code": "private void append(final String text) {\n        if (mLogBuffer.length() > mSize / 2) {\n            mLogBuffer.delete(0, mSize / 2);\n            mLogBuffer.append(\"----------- buffer truncated ----------\" + NL);\n        }\n        mLogBuffer.append(text);\n    }", "comment": "append text to log buffer"}, {"path": "./Dataset/funcom_test/26499821.txt", "code": "public Namespace getNamespaceFor(Class aClass) {\n    Namespace aNamespace = null;\n\n    for (Iterator it = _theDelegates.iterator();\n          it.hasNext() && (aNamespace == null);) {\n      NamespaceFactoryIF aFactory = (NamespaceFactoryIF) it.next();\n      aNamespace = aFactory.getNamespaceFor(aClass);\n    }\n\n    return aNamespace;\n  }", "comment": "returns the namespace that should be associated with the xml representation"}, {"path": "./Dataset/funcom_test/1781034.txt", "code": "public String getTitle() throws SAXException {\n        NodeList nl = ((Document) getOriginalDOM()).getElementsByTagName( \"title\" );\n        if (nl.getLength() == 0) return \"\";\n        if (!nl.item(0).hasChildNodes()) return \"\";\n        return nl.item(0).getFirstChild().getNodeValue();\n    }", "comment": "returns the title of the page"}, {"path": "./Dataset/funcom_test/25584587.txt", "code": "public void add(int index, GameObject element) {\n        if (index > size || index < 0) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n        }\n        ensureCapacity(size + 1); // Increments modCount!!\n        System.arraycopy(gameObjects, index, gameObjects, index + 1, size - index);\n        gameObjects[index] = element;\n        size++;\n    }", "comment": "inserts the specified element at the specified position in this"}, {"path": "./Dataset/funcom_test/35545310.txt", "code": "public int getMaxOccurs() {\n\n//\t\tint maxOccurs = 1;\n//\n//\t\tif (sMaxOccurs != null) {\n//\t\t\tif (sMaxOccurs.equals(R4Constants.MAX_OCCURS_VALUE_UNBOUNDED)) {\n//\t\t\t\tmaxOccurs = Integer.MAX_VALUE;\n//\t\t\t} else {\n//\t\t\t\tmaxOccurs = Integer.parseInt(sMaxOccurs);\n//\t\t\t}\n//\t\t}\n//\n//\t\treturn maxOccurs;\n\t\treturn 0;\n\t}", "comment": "return max occurs value of msp interface ethernet component"}, {"path": "./Dataset/funcom_test/47661044.txt", "code": "protected void addProfileAssociationsPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_TransformationRule_profileAssociations_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_TransformationRule_profileAssociations_feature\", \"_UI_TransformationRule_type\"),\n\t\t\t\t WorkspacePackage.Literals.TRANSFORMATION_RULE__PROFILE_ASSOCIATIONS,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the profile associations feature"}, {"path": "./Dataset/funcom_test/44731552.txt", "code": "public void testActionInvoke() {\n\t\t\n\t\tControlContainer root = (ControlContainer)control;\n\t\tActionTestControl atc = new ActionTestControl(root, \"atc\");\n\t\t\n\t\tsendAction(atc, \"test\", \"\");\n\t\tassertTrue(atc.invoked);\n\t\t\n\t\tatc.invoked = false;\n\t\tsendAction(atc, \"Test\", \"\");\n\t\tassertTrue(atc.invoked);\n\n\t\ttry {\n\t\t\tatc.invoked = false;\n\t\t\tsendAction(atc, \"TEST\", \"\");\n\t\t\tfail(\"No error raised on call of unknown method.\");\n\t\t\t\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\t// that was expected.\n\t\t}\n\t\t\n\t}", "comment": "test the automatic action invocation"}, {"path": "./Dataset/funcom_test/22171857.txt", "code": "protected void addLocPONrPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_EveComponent_locPONr_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_EveComponent_locPONr_feature\", \"_UI_EveComponent_type\"),\n\t\t\t\t EvesimPackage.Literals.EVE_COMPONENT__LOC_PO_NR,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t getString(\"_UI_LocationPropertyCategory\"),\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the loc po nr feature"}, {"path": "./Dataset/funcom_test/33719527.txt", "code": "public void testSetFontColor() {\n        System.out.println(\"setFontColor\");\n        \n        String fontColor = \"\";\n        SystemClient_DBImpl instance = new SystemClient_DBImpl();\n        \n        instance.setFontColor(fontColor);\n        \n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of set font color method of class com"}, {"path": "./Dataset/funcom_test/47661456.txt", "code": "protected void addAggregationPhaseIterationPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Iteration_aggregationPhaseIteration_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Iteration_aggregationPhaseIteration_feature\", \"_UI_Iteration_type\"),\n\t\t\t\t ProcessPackagePackage.Literals.ITERATION__AGGREGATION_PHASE_ITERATION,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the aggregation phase iteration feature"}, {"path": "./Dataset/funcom_test/29592096.txt", "code": "protected void findCoordinateVariables(NetcdfDataset ds) {\n    Iterator vars = ds.getVariables().iterator(); // uses copy\n    while (vars.hasNext()) {\n      VariableDS ncvar = (VariableDS) vars.next();\n      if (ncvar.isCoordinateVariable() && !(ncvar instanceof CoordinateAxis)) {\n        ds.addCoordinateAxis( ncvar);\n      }\n    }\n  }", "comment": "find the net cdf coordinate variables"}, {"path": "./Dataset/funcom_test/773557.txt", "code": "public void start(BundleContext context) throws Exception {\n\t\tthis.context = context;\n\t\tBundle parserBundle = context.getBundle();\n\t\ttry {\n\t\t\t// check for sax parsers\n\t\t\tregisterSAXParsers(getParserFactoryClassNames(parserBundle\n\t\t\t\t\t.getResource(SAXCLASSFILE)));\n\t\t\t// check for dom parsers\n\t\t\tregisterDOMParsers(getParserFactoryClassNames(parserBundle\n\t\t\t\t\t.getResource(DOMCLASSFILE)));\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\t// if there were any IO errors accessing the resource files\n\t\t\t// containing the class names\n\t\t\tioe.printStackTrace();\n\t\t\tthrow new FactoryConfigurationError(ioe);\n\t\t}\n\t}", "comment": "called when this bundle is started so the framework can perform the"}, {"path": "./Dataset/funcom_test/42171620.txt", "code": "protected void addTypePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DynamicValue_type_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DynamicValue_type_feature\", \"_UI_DynamicValue_type\"),\n\t\t\t\t ActionStepPackage.eINSTANCE.getDynamicValue_Type(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the type feature"}, {"path": "./Dataset/funcom_test/9014994.txt", "code": "public void valueForPathChanged(TreePath path, Object newValue) {\n\t\tTreeModelEvent event;\n\t\tVector v;\n\n\t\tevent = new TreeModelEvent(this, path);\n\t\tsynchronized (mTreeListeners) {\n\t\t\tv = (Vector) mTreeListeners.clone();\n\t\t}\n\n\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\tTreeModelListener listener = (TreeModelListener) v.elementAt(i);\n\t\t\tlistener.treeStructureChanged(event);\n\t\t}\n\t}", "comment": "messaged when the user has altered the value for the item identified by"}, {"path": "./Dataset/funcom_test/40869595.txt", "code": "public Command getBackCommand22() {\n        if (backCommand22 == null) {//GEN-END:|529-getter|0|529-preInit\n            // write pre-init user code here\n            backCommand22 = new Command(\"Back\", Command.BACK, 0);//GEN-LINE:|529-getter|1|529-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|529-getter|2|\n        return backCommand22;\n    }", "comment": "returns an initiliazed instance of back command22 component"}, {"path": "./Dataset/funcom_test/16652530.txt", "code": "private String getSelection(Application wordAppl) {\n    Selection sel = wordAppl.getSelection();\n    // Alternative (VB): sel.moveEndWhile(?? cset:=vbCr ??, WdConstants.wdBackward);\n    // Alternative (VB): Call app.ActiveDocument.Bookmarks.Item(\"\\endofdoc\").Select()\n    sel.moveEnd();\n    sel.copy();\n    return sel.getText();\n  }", "comment": "gets the currently selected text from a word application"}, {"path": "./Dataset/funcom_test/9834260.txt", "code": "public String getSourceName() {\n\t\tif (this.sourceName == null) {\n\t\t\tthis.sourceName = this.isPageView() ? alias.replaceAll(\"[^0-9A-Za-z_]\", \"_\") : GraceletContext.getInstance().getCompiler().getUniqueClassName(src, alias);\n\t\t}\n\t\treturn this.sourceName; \n\t}", "comment": "the source name is used by expression closure system to relate a closure"}, {"path": "./Dataset/funcom_test/27803187.txt", "code": "public void addRowToRowModel ( BetterTableDimensionUnit row ) {\n    if( row.getLabelValue() == null ) {\n      row.setLabelValue(\n        getTableModel().getRowName( row.getModelIndex() )\n      );\n    }\n    getRowModel().addDimensionUnit( row );\n  } // addRowToRowModel(..)", "comment": "add the given table row to the end of the row model"}, {"path": "./Dataset/funcom_test/47661209.txt", "code": "protected void addDisciplinesPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DisciplinePackage_disciplines_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DisciplinePackage_disciplines_feature\", \"_UI_DisciplinePackage_type\"),\n\t\t\t\t WorkspacePackage.Literals.DISCIPLINE_PACKAGE__DISCIPLINES,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the disciplines feature"}, {"path": "./Dataset/funcom_test/19518936.txt", "code": "private void calculateParameters (Collection<IEvent> events, HashMap<IEvent, Collection<IParameter>> parameterMap) throws RodinDBException {\n\t\tfor (IEvent event : events) {\n\t\t\tCollection<IParameter> parameters = new ArrayList<IParameter>();\n\t\t\tfor (IParameter parameter : event.getParameters())\n\t\t\t\tparameters.add(parameter);\n\t\t\tparameterMap.put(event, parameters);\n\t\t}\n\t}", "comment": "calculates the map of parameter for a given collection of events"}, {"path": "./Dataset/funcom_test/19344931.txt", "code": "public void updateRecordSepList(int dbIdx) {\n\n        try {\n           // System.out.println(updateRecordSep);\n            Connection con = Common.getDBConnection(dbIdx);\n            Statement statement = con.createStatement();\n\n            statement.executeUpdate(updateRecordSep);\n            statement.close();\n        } catch (Exception e) {\n            Common.getLogger().logException(AbsSSLogger.ERROR, e);\n\n            e.printStackTrace();\n        }\n    }", "comment": "change record sep list to default"}, {"path": "./Dataset/funcom_test/31789333.txt", "code": "public String getParam(String key) {\n        if(getParameterMap()==null) {\n            return null; }\n        String[] vals=(String[])(getParameterMap().get(key));\n        if((vals==null)||(vals.length<1)) {\n            return null; }\n        return vals[0];\n    }", "comment": "utility for retrieving single valued string parameters from our"}, {"path": "./Dataset/funcom_test/40101481.txt", "code": "public String getAuthorizedUserEmail(String username) {\n        if (_authorization.containsKey(username)) {\n            String[] parsedPasswordAndEmail = BlojsomUtils.parseLastComma((String)_authorization.get(username));\n            if (parsedPasswordAndEmail.length < 2) {\n                return getBlogOwnerEmail();\n            } else {\n                return parsedPasswordAndEmail[1];\n            }\n        }\n\n        return null;\n    }", "comment": "return the e mail address of an authorized user from this blog"}, {"path": "./Dataset/funcom_test/28111100.txt", "code": "public void set(String name, Object value) throws EvalError {\n        // map null to Primtive.NULL coming in...\n        if (value == null)\n            value = Primitive.NULL;\n\n        CallStack callstack = new CallStack();\n        LHS lhs = globalNameSpace.getNameResolver(name).toLHS(callstack, this);\n        lhs.assign(value);\n    }", "comment": "assign the value to the name"}, {"path": "./Dataset/funcom_test/19499267.txt", "code": "public void testImageGuard() throws Exception {\n\t\tfinal IMachineRoot mch = createMachine(\"mch\");\n\t\tfinal IEvent evt = createEvent(mch, \"evt\");\n\t\tfinal IGuard grd = createGuard(evt, \"grd\", \"TRUE\");\n\t\tassertImage(\"Unexpected image descriptor for guard\",\n\t\t\t\tIEventBSharedImages.IMG_GUARD_PATH, grd);\n\n\t\tgrd.setTheorem(true, null);\n\t\tassertImage(\n\t\t\t\t\"Unexpected image descriptor for guard with theorem attribute\",\n\t\t\t\tIEventBSharedImages.IMG_THEOREM_PATH, grd);\n\t}", "comment": "checks the image for a guard"}, {"path": "./Dataset/funcom_test/45376984.txt", "code": "public double getHigh() {\n\t\tElement units = channel.getChild(\"units\", this.namespace);\n\n\t\tElement forecast = item.getChild(\"forecast\", this.namespace);\n\t\tString content = forecast.getAttributeValue(\"high\");\n\t\tdouble high = Double.parseDouble(content);\n\t\tif (units.getAttributeValue(\"temperature\").equals(\"F\")) {\n\t\t\t// Converte de Farehreit para Celcius.\n\t\t\thigh = (high - 32) * 5 / 9;\n\t\t}\n\t\treturn high;\n\t}", "comment": "return the highest temperature for the current day"}, {"path": "./Dataset/funcom_test/23857511.txt", "code": "public void onTransTimeout(TransactionClient transaction) {\n\t\tif (transaction.getTransactionMethod().equals(SipMethods.REGISTER)) {\n\t\t\tprintLog(\"Registration failure: No response from server.\", LogLevel.HIGH);\n\t\t\tregistered = false;\n\t\t\tif (listener != null) {\n\t\t\t\tlistener.onUaRegistrationFailure(this, target, contact, \"Timeout\");\n\t\t\t}\n\t\t}\n\t}", "comment": "callback function called when client expires timeout"}, {"path": "./Dataset/funcom_test/39924474.txt", "code": "public void end() {\n        containerLayer.getRootPane().setGlassPane(savedGlassPane);\n        containerLayer.getRootPane().getGlassPane().setVisible(false);\n        animationLayer.setVisible(false);\n        containerLayer.setVisible(true);\n\tcontainerLayer.repaint();\n        animator = null;\n        transitionTarget.transitionComplete();\n    }", "comment": "override of code timing target"}, {"path": "./Dataset/funcom_test/39937990.txt", "code": "protected void addReleaseTimePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Task_releaseTime_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Task_releaseTime_feature\", \"_UI_Task_type\"),\n\t\t\t\t GeneralModelPackage.Literals.TASK__RELEASE_TIME,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the release time feature"}, {"path": "./Dataset/funcom_test/22620662.txt", "code": "public SimpleTypeLabel getSimpleTypeLabel(String xpath, String siblingPath, String indexId) {\n\t\tSimpleTypeLabel labelObj = super.getSimpleTypeLabel(xpath, siblingPath, indexId);\n\t\tlabelObj.editMeTag = getEditMeTag(xpath, siblingPath, indexId);\n\t\treturn labelObj;\n\t}", "comment": "gets the simple type label attribute of the viewer renderer object"}, {"path": "./Dataset/funcom_test/35244949.txt", "code": "public void RemoveAll() {\n        Vector<CopyBook> vector2 = null;\n        try {\n            vector2 = getVectorCopyBookDisplay();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n        }\n        getVector().removeAll(vector2);\n        if (selectedIndex != 0) {\n            vectorComboBox.removeElementAt(selectedIndex);\n            refreshComboBox();\n        }\n    }", "comment": "remove all copies of book in form check in"}, {"path": "./Dataset/funcom_test/8870514.txt", "code": "private Document getYahooRequest(String name, String postcode, String country) throws Exception {\n\t\tHttpClient httpClient = new HttpClient();\n\t\t\n\t\tString url = yahooWebServiceBaseUrl+\"places.q(%27\"+\n\t\t\tURLEncoder.encode(name,\"UTF-8\")+\"+\"+postcode+\"+\"+country\n\t\t\t+\"%27)?appid=\"+yahooApiKey+\"&format=xml\";\n\t\t\n\t\tSystem.out.println(url);\n\t\tGetMethod getMethod = new GetMethod(url);\n\t\thttpClient.executeMethod(getMethod);\n\t\t\n\t\tint statusCode = getMethod.getStatusCode();\n\t\tString responseBody = getMethod.getResponseBodyAsString();\n\t\tSystem.out.println(responseBody);\n\t\tif(statusCode!=200)\n\t\t\treturn null;\n\t\treturn DocumentHelper.parseText(responseBody);\n\t}", "comment": "make request and parse response"}, {"path": "./Dataset/funcom_test/34427057.txt", "code": "public void saveAsAddListener(ActionListener listener, String toolTip) {\n        ActionListener[] lsts = saveAsMenuItem.getActionListeners();\n        for (ActionListener al : lsts) {\n            saveAsMenuItem.removeActionListener(al);\n        }\n        saveAsMenuItem.addActionListener(listener);\n        saveAsMenuItem.setToolTipText(toolTip);\n        saveAsMenuItem.setEnabled(true);\n    }", "comment": "adds a listener to the save as"}, {"path": "./Dataset/funcom_test/12753309.txt", "code": "private void fillRowWithValues(String[] values, int row) {\n        for (int col = 0; col < values.length; col++) {\n            jTable1.getModel().setValueAt(values[col], row, col + 1);//We ignore column 0 because it contains labels\n        }\n\n    }", "comment": "fill values in cells of specified row using the given values"}, {"path": "./Dataset/funcom_test/21359552.txt", "code": "private void updateItems() {\n        MainFrame frame = Context.mainFrame;\n        \n        boolean queuePaused = queue.isPaused();\n        pauseQueueItem.setLabel(queuePaused ? unpauseQueue : pauseQueue);\n        //visible if visible and not iconified\n        boolean visible = frame.isVisible() && (frame.getExtendedState() & JFrame.ICONIFIED) == 0;\n        toggleItem.setLabel(visible ? hideWindow : showWindow);\n    }", "comment": "update labels in popup menu according to current program state"}, {"path": "./Dataset/funcom_test/26115189.txt", "code": "protected double getEntropy(int numberOfPostives, int numerberOfNegatives) {\n\n\t\tif (numberOfPostives == 0 || numerberOfNegatives == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tdouble positives = numberOfPostives;\n\t\tdouble negatives = numerberOfNegatives;\n\n\t\tdouble total = positives + negatives;\n\n\t\treturn -(positives / total) * (log2(positives / total)) - (negatives / total) * (log2(negatives / total));\n\n\t}", "comment": "implementation of entropy calculation"}, {"path": "./Dataset/funcom_test/22621050.txt", "code": "public Map getLevelMap() {\n\t\tMap levelMap = new HashMap();\n\t\tList standards = getStandards();\n\t\tfor (int i = 0; i < standards.size(); i++) {\n\t\t\tAdnStandard std = (AdnStandard) standards.get(i);\n\t\t\tInteger levels = new Integer(std.getLevels());\n\t\t\tList list = new ArrayList();\n\t\t\tif (levelMap.containsKey(levels)) {\n\t\t\t\tlist = (List) levelMap.get(levels);\n\t\t\t}\n\t\t\tlist.add(std);\n\t\t\tlevelMap.put(levels, list);\n\t\t}\n\t\treturn levelMap;\n\t}", "comment": "debugging method maps standards to their level the number of"}, {"path": "./Dataset/funcom_test/21079241.txt", "code": "protected IParser createAssocationRoleParser(boolean sourceNotTarget) {\n\t\tLookupSuite lookupSuite = getAssociationLookupSuite();\n\t\treturn new SemanticParserAdapter(new AssociationEndParser(lookupSuite), new AssociationEndApplyStrategy(sourceNotTarget), new AssociationEndToString.ROLE_VIEW(sourceNotTarget),\n\t\t\t\tnew AssociationEndToString.EDIT(sourceNotTarget));\n\t}", "comment": "different views but shared common edit"}, {"path": "./Dataset/funcom_test/33993868.txt", "code": "protected void addColsPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_TextAreaWidget_cols_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_TextAreaWidget_cols_feature\", \"_UI_TextAreaWidget_type\"),\n\t\t\t\t UiPackage.Literals.TEXT_AREA_WIDGET__COLS,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the cols feature"}, {"path": "./Dataset/funcom_test/24247235.txt", "code": "public void resetDevice(NXTInfo nxt) throws NXTCommException, IOException {\n\t\tui.message(\"Attempting to reboot the device.\");\n\t\tNXTComm nxtComm = NXTCommFactory.createNXTComm(nxt.protocol);\n\t\tNXTCommand cmd = NXTCommand.getSingleton();\n\t\tif (!nxtComm.open(nxt, NXTComm.LCP)) {\n\t\t\tthrow new NXTCommException(\"Failed to open device in command mode.\");\n\t\t}\n\t\tcmd.setNXTComm(nxtComm);\n\t\t// Force into firmware update mode.\n\t\tcmd.boot();\n\t\tcmd.close();\n\t}", "comment": "attempt to restart the nxt in sam ba mode"}, {"path": "./Dataset/funcom_test/19505094.txt", "code": "public long getHeight() {\n\t\tlong i = 0;\n\t\twhile (true) {\n\t\t\tif (level.add(ONE).compareTo(BigInteger.valueOf(Double.valueOf((Math.pow(2, i))).longValue()))>=0\n\t\t\t\t&&\n\t\t\t\tlevel.add(ONE).compareTo(BigInteger.valueOf(Double.valueOf((Math.pow(2, i+1))).longValue()))<0)\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t}", "comment": "returns the height of this level"}, {"path": "./Dataset/funcom_test/21629677.txt", "code": "public String getOrientation() {\n        if (null != this.orientation) {\n            return this.orientation;\n        }\n        ValueExpression _ve = getValueExpression(\"orientation\");\n        if (_ve != null) {\n            return (java.lang.String) _ve.getValue(getFacesContext().getELContext());\n        } else {\n            return null;\n        }\n    }", "comment": "p return the orientation of the chart"}, {"path": "./Dataset/funcom_test/22672498.txt", "code": "public File findFile(String fileName, File initialDirectory, SearchType searchType) {\n\t\tthis.setStatus(\"Calculating files ...\");\n\t\tthis.initialDirectory = initialDirectory;\n\t\tthis.numberOfFiles = this.getNumberOfFiles(this.initialDirectory);\n\t\tthis.setStatus(\"Searching \" + this.numberOfFiles + \" folders\");\n\t\treturn this.searchForFile(fileName, initialDirectory, searchType);\n\t}", "comment": "search a given directory recursively for a given directory file name"}, {"path": "./Dataset/funcom_test/45931269.txt", "code": "private SimpleHClass getIntersectDisj(SimpleHClass c1, SimpleHClass c2) throws HierarchyException {\n\n        if (superclassOf(c1.getID(), c2.getID())) {\n            return c2;\n        } else {\n            if (superclassOf(c2.getID(), c1.getID())) {\n                return c1;\n            } else {\n                return null;\n            }\n        }\n\n    }", "comment": "method for getting disjuntion between two classes in a disjunctive hierarchy"}, {"path": "./Dataset/funcom_test/40869081.txt", "code": "public Command getBackCommand18() {\n        if (backCommand18 == null) {//GEN-END:|487-getter|0|487-preInit\n            // write pre-init user code here\n            backCommand18 = new Command(\"Back\", Command.BACK, 0);//GEN-LINE:|487-getter|1|487-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|487-getter|2|\n        return backCommand18;\n    }", "comment": "returns an initiliazed instance of back command18 component"}, {"path": "./Dataset/funcom_test/26285909.txt", "code": "public void removeIndexInterval(int index0, int index1) {\n        setAnchorSelectionIndex(index0);\n        setLeadSelectionIndex(index1);\n        int max = Math.max(index0, index1);\n        for (int index = Math.min(index0, index1); index <= max; index++) {\n            selectedIndices.remove(new Integer(index));\n        }\n        fireValueChanged(index0, index1);\n    }", "comment": "remove the indices in the interval index0 index1 inclusive from the selection model"}, {"path": "./Dataset/funcom_test/10216042.txt", "code": "public void editElement(Object element, int column) {\n\t\tif (cellEditor != null) {\n\t\t\tapplyEditorValue();\n\t\t}\n\n\t\tIStructuredSelection structuredSelection;\n\t\tif (element instanceof TreePath) {\n\t\t\tstructuredSelection = new TreeSelection((TreePath) element, viewer\n\t\t\t\t\t.getComparer());\n\t\t} else {\n\t\t\tstructuredSelection = new StructuredSelection(element);\n\t\t}\n\t\tsetSelection(structuredSelection, true);\n\t\tItem[] selection = getSelection();\n\t\tif (selection.length != 1) {\n\t\t\treturn;\n\t\t}\n\n\t\ttreeItem = selection[0];\n\n\t\t// Make sure selection is visible\n\t\tshowSelection();\n\t\tcolumnNumber = column;\n\t\tactivateCellEditor();\n\n\t}", "comment": "start editing the given element"}, {"path": "./Dataset/funcom_test/24244188.txt", "code": "protected String fetchString(int constantEnumeration, int rxLength) {\n\t\tbyte [] stringBytes = new byte[rxLength];\n\t\tgetData(constantEnumeration, stringBytes, rxLength);\n\n\t\t// Get rid of everything after 0.\n\t\tint zeroPos = 0;\n\t\tfor(zeroPos = 0;zeroPos < rxLength;zeroPos++) {\n\t\t\tif(stringBytes [zeroPos] == 0) break;\n\t\t}\n\t\tString s = new String(stringBytes).substring(0,zeroPos);\n\t\treturn s;\n\t}", "comment": "helper method for retrieving string constants using i2 c protocol"}, {"path": "./Dataset/funcom_test/50718602.txt", "code": "private void loadCreateDateTime(SpooledFile p, Vector row) {\n\n      try {\n         String datetime = formatDate(p.getStringAttribute(PrintObject.ATTR_DATE)) +\n                           \" \" +\n                           formatTime(p.getStringAttribute(PrintObject.ATTR_TIME));\n         row.add(datetime);\n      }\n      catch (Exception ex) {\n//         System.out.println(ex.getMessage());\n         row.add(\"Attribute Not supported\");\n      }\n   }", "comment": "format the create date and time into a string to be used"}, {"path": "./Dataset/funcom_test/12752908.txt", "code": "public boolean isLastLevel() {\n        if (isLastLevel == null && getCode() != null && getCode().length() > 0) {\n            isLastLevel = isLastLevel(getCode());\n        }\n        return getCode() != null && getCode().length() == 0 ? true : isLastLevel;\n    }", "comment": "it means that there isnt any account under this account"}, {"path": "./Dataset/funcom_test/36760577.txt", "code": "protected void loadStoredRelations() throws IOException, ParseException, CrappyDBMSException {\n\t\tBufferedReader inputStream = new BufferedReader(new FileReader(this.getDataDictionaryFile()));\n\t\t//inputStream.readLine();\n\t\tint currentLine = 0;\n\t\tDataDictionaryParser dataDictionaryParser = DataDictionaryParser.newDataDictionaryParser(this);\n\t\t\n\t\t//currentLine = 1;\n\t\tboolean ok = true;\n\t\twhile (ok) {\n\t\t\tok = dataDictionaryParser.parseStoredRelation(inputStream, currentLine);\n\t\t\tcurrentLine += 3;\n\t\t}\n\t\tinputStream.close();\n\n\t}", "comment": "load all the stored relations described in the data dictionarys file and create"}, {"path": "./Dataset/funcom_test/33178793.txt", "code": "public List cornerList() {\n        if (leftLine == null) initialiseLeftLine();\n        if (rightLine == null) initialiseRightLine();\n\n        List corners = new java.util.Vector();\n        corners.add(leftLine.begin());\n        corners.add(leftLine.end());\n        corners.add(rightLine.begin());\n        corners.add(rightLine.end());\n        return corners;\n    }", "comment": "returns a list of corners as point2 ds starting with lower left and"}, {"path": "./Dataset/funcom_test/40873791.txt", "code": "public Command getBackCommand24() {\n        if (backCommand24 == null) {//GEN-END:|587-getter|0|587-preInit\n            // write pre-init user code here\n            backCommand24 = new Command(\"OK\", Command.BACK, 0);//GEN-LINE:|587-getter|1|587-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|587-getter|2|\n        return backCommand24;\n    }", "comment": "returns an initiliazed instance of back command24 component"}, {"path": "./Dataset/funcom_test/19281078.txt", "code": "public String toString() {\n\t\tfinal StringBuffer buf = new StringBuffer();\n\t\tbuf.append(\"    AbstractParamType:\")\n\t\t\t\t.append(\" {Name=\").append(iName)\n\t\t\t\t.append(\", ParamType=\").append(iParamType)\n\t\t\t\t.append(\", OrderIndex=\").append(iOrderIndex)\n\t\t\t\t.append(\", Value=\").append(iValue)\n\t\t\t\t.append(\", IsInternal=\").append(isInternal)\n\t\t\t\t.append('}');\n\t\treturn buf.toString();\n\t}", "comment": "returns a useful string representation of this implementation instance that"}, {"path": "./Dataset/funcom_test/40864441.txt", "code": "public TextField getTextField4() {\n        if (textField4 == null) {//GEN-END:|26-getter|0|26-preInit\n            // write pre-init user code here\n            textField4 = new TextField(\"Percepciones:\", null, 32, TextField.DECIMAL);//GEN-LINE:|26-getter|1|26-postInit\n            // write post-init user code here\n        }//GEN-BEGIN:|26-getter|2|\n        return textField4;\n    }", "comment": "returns an initiliazed instance of text field4 component"}, {"path": "./Dataset/funcom_test/22618713.txt", "code": "public Element getMultiBoxInput() {\n\t\t// prtln(\"getMultiBoxInput() with \" + xpath);\n\n\t\tif (state.hasMdvMapping(xpath)) {\n\t\t\tElement mdvMultiBox = df.createElement(\"st__mdvMultiBox\")\n\t\t\t\t\t.addAttribute(\"elementPath\", \"enumerationValuesOf(\" + XPathUtils.getSiblingXPath(xpath) + \")\");\n\t\t\treturn mdvMultiBox;\n\t\t}\n\t\telse {\n\t\t\treturn super.getMultiBoxInput();\n\t\t}\n\t}", "comment": "renders a multibox input a set of of checkboxes as an element"}, {"path": "./Dataset/funcom_test/38222484.txt", "code": "public void warning(SAXParseException e) throws SAXParseException {\n    System.out.println(\"** Warning, line \" + e.getLineNumber()\n      + \", uri \" + e.getSystemId());\n    System.out.println(\"    \" + e.getMessage());\n  }", "comment": "callbacks the application if some warnings were produced"}, {"path": "./Dataset/funcom_test/46795357.txt", "code": "private StringBuffer buildDisplayString() {\n\t\tStringBuffer displayString = new StringBuffer();\n\t\tdisplayString.append(elementString);\n\t\tif(!signature.equals(\"\")){\n\t\t\tdisplayString.append(signature);\n\t\t}\t\t\n\t\tif(!returnStrOfMethod.equals(\"\")){\n\t\t\tdisplayString.append(\" : \");\n\t\t\tdisplayString.append(returnStrOfMethod);\n\t\t}else if(!typeString.equals(\"\")){\n\t\t\tdisplayString.append(\" : \");\n\t\t\tdisplayString.append(typeString);\n\t\t}\n\t\t\n\t\t//displayString.append(\" - \");\n\t\t//displayString has to contain valid output\n\t\treturn displayString;\n\t}", "comment": "append string elements to build a display string"}, {"path": "./Dataset/funcom_test/12724348.txt", "code": "public void beforeInsert(int index, int element) {\n\t// overridden for performance only.\n\tif (size == index) {\n\t\tadd(element);\n\t\treturn;\n\t}\n\tif (index > size || index < 0) \n\t\tthrow new IndexOutOfBoundsException(\"Index: \"+index+\", Size: \"+size);\n\tensureCapacity(size + 1);\n\tSystem.arraycopy(elements, index, elements, index+1, size-index);\n\telements[index] = element;\n\tsize++;\n}", "comment": "inserts the specified element before the specified position into the receiver"}, {"path": "./Dataset/funcom_test/31015410.txt", "code": "public void writeMessageTo(LSBWriter sink) throws IOException {\n    int length=content.length();\n    for (int j=0;j<length;j++) {\n      char c=content.charAt(j);\n      if (c=='\\012') c='\\015';\n      sink.writeByte((byte)(c+MESSCODE));\n    }\n  }", "comment": "writes one message content that is somebody else must have"}, {"path": "./Dataset/funcom_test/16755696.txt", "code": "private void init() throws URISyntaxException, IOException {\n\t\t// init lookup service\n\t\t_lookupService = new LookupService(Install.GEO_DATA_FILE, LookupService.GEOIP_MEMORY_CACHE);\n\t\t// public IP\n\t\tURL URL = new URL(\"http://www.whatismyip.org/\");\n\t\tHttpURLConnection connection = (HttpURLConnection) URL.openConnection();\n\t\tInputStream inStream = connection.getInputStream();\n\t\tInputStreamReader isr = new InputStreamReader(inStream);\n\t\tBufferedReader br = new BufferedReader(isr);\n\t\t_publicIp = br.readLine();\n\t}", "comment": "initialize route service"}, {"path": "./Dataset/funcom_test/38221452.txt", "code": "public void actionPerformed(ActionEvent e) {\n    if (e.getSource() instanceof JButton) {\n      int index = getPanelIndex(((JButton) e.getSource()).getText());\n      if (currentIndex >= 0 && currentIndex != index)\n        sweepBar(index);\n    }\n  }", "comment": "performs actions from user inteface and local timers"}, {"path": "./Dataset/funcom_test/10892019.txt", "code": "protected boolean shouldAbandon() {\n        if (poolProperties.getAbandonWhenPercentageFull()==0) return true;\n        float used = busy.size();\n        float max  = poolProperties.getMaxActive();\n        float perc = poolProperties.getAbandonWhenPercentageFull();\n        return (used/max*100f)>=perc;\n    }", "comment": "determines if a connection should be abandoned based on"}, {"path": "./Dataset/funcom_test/12751351.txt", "code": "public Rectangle parseRectangle(String string, String delimeter) {\n\t\tStringTokenizer st = new StringTokenizer(string, delimeter);\n\t\tint[] result = new int[st.countTokens()];\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tresult[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\treturn new Rectangle(result[0], result[1], result[2], result[3]);\n\t}", "comment": "parses a rectangle from a string given the coordiantes of the upper left"}, {"path": "./Dataset/funcom_test/27764268.txt", "code": "public boolean isDeletable (String byUser) {\n\t\tif (byUser.equals (daid) && signedby.toString().equals(\"\")) {\n\t\t\treturn true;\n\t\t} // end of if (byUser.equals (daid) && signedby.toString().equals(\"\"))\n\t\telse {\n\t\t\treturn false;\n\t\t} // end of if (byUser.equals (daid) && signedby.toString().equals(\"\"))\n\t}", "comment": "the document may be deleted by its author if it is not signed"}, {"path": "./Dataset/funcom_test/11950091.txt", "code": "public void testSetNumeroBus() {\n        System.out.println(\"setNumeroBus\");\n        \n        String numeroBus = \"\";\n        Cronograma instance = null;\n        \n        instance.setNumeroBus(numeroBus);\n        \n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of set numero bus method of class proyectoventadepasajes"}, {"path": "./Dataset/funcom_test/22624130.txt", "code": "public List getUrlPaths() {\n\t\tList urlPathTypes = Arrays.asList(new String[]{\"url\", \"uniqueUrl\"});\n\t\tList xpaths = new ArrayList();\n\t\tIterator iterator = getSchemaPathMap().getSchemaPathsByValueTypes(urlPathTypes).iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\txpaths.add(((SchemaPath) iterator.next()).xpath);\n\t\t}\n\t\treturn xpaths;\n\t}", "comment": "returns normalized xpaths specified in framework configuration as url"}, {"path": "./Dataset/funcom_test/1864469.txt", "code": "public Integer getNearestPixel(double lon, double lat) throws IOException {\n        int[] nearestIndices = this.getNearestIndices(lon, lat);\n        if (nearestIndices == null) return null;\n        return this.image.getPixel(nearestIndices[0], nearestIndices[1]);\n    }", "comment": "gets the nearest argb pixel to the given longitude latitude point or"}, {"path": "./Dataset/funcom_test/16779243.txt", "code": "public void initialize(IVector pInit, IVector[] searchInit){\n\t\tthis.pMin = pInit;\n\t\tthis.fMin = this.f.evaluate(pInit);\n\t\t// generate initial perturbations\n\t\tint n = searchInit.length;\n\t\tthis.pCurrent = pInit;\n\t\tthis.fCurrent = this.fMin;\n        this.xiCurrent = new IVector[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\txiCurrent[i]=searchInit[i].clone();\n\t\t}\n\t}", "comment": "initializer with start directions"}, {"path": "./Dataset/funcom_test/22627540.txt", "code": "public String uriMapToString() {\n\t\tString s = \"\\nUriMap\";\n\t\tfor (Iterator i = uriMap.entrySet().iterator(); i.hasNext(); ) {\n\t\t\tMap.Entry entry = (Map.Entry) i.next();\n\t\t\tString uri = (String) entry.getKey();\n\t\t\tNamespace ns = (Namespace) entry.getValue();\n\t\t\ts += \"\\n\\t\" + uri + \"(\" + this.nsToString(ns) + \")\";\n\t\t}\n\t\treturn s + \"\\n\";\n\t}", "comment": "debugging utility returns a printable representation of the uri map"}, {"path": "./Dataset/funcom_test/37849994.txt", "code": "private void listIsClicked() {\n\t\t    int index = gameList.getSelectedIndex();\n\t\t    gameList.clearSelection();\n\t\t    try {\n\t\t\tif (gameArray[index] != null) {\n\t\t\t    \n\t\t\t    /* Remove game from list if it's over. */\n\t\t\t    if (!gameArray[index].shouldRemove()) {\n\t\t\t\tgameArray[index].drawBoard();\n\t\t\t    } else {\n\t\t\t\tgameArray[index] = null;\n\t\t\t    }\n\t\t\t} \n\t\t\t \n\t\t\t/*Don't do anything if you click outside of the list.*/\n\t\t    } catch (ArrayIndexOutOfBoundsException e) { }\n\t\t}", "comment": "handles clicks on the list"}, {"path": "./Dataset/funcom_test/25283716.txt", "code": "public Object invoke(URL url, Object[] arguments) throws Exception, PpException {\n\t\tInvocationListenerImpl listener = new InvocationListenerImpl();\n\t\tserver.invocation(url, arguments, listener);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tlistener.semaphore.acquire();\n\t\t\t\tbreak;\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tif (debug) {\n\t\t\t\t\tSystem.err.println(\"PadRMI invocation interrupted while waiting for result -- retrying:\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswitch (listener.state) {\n\t\tcase RESULT:\n\t\t\treturn listener.result;\n\t\tcase ERROR:\n\t\t\tthrow listener.exception;\n\t\tdefault:\n\t\t\tthrow new PpLocalException(\"Unknown state while waiting for invocation result, this should never happen.\");\n\t\t}\n\t}", "comment": "makes a call using server given on construction time interface and waits"}, {"path": "./Dataset/funcom_test/254717.txt", "code": "public void addSibling(AST node) {\n    if(node == null) return;\n    TNode next = (TNode)right;\n    right = (TNode)node;\n    ((TNode)node).left = this;\n    TNode nodeLastSib = ((TNode)node).getLastSibling();\n    nodeLastSib.right = next;\n    if(next != null)\n      next.left = nodeLastSib;\n  }", "comment": "add the new node as a new sibling inserting it ahead of any"}, {"path": "./Dataset/funcom_test/3644946.txt", "code": "synchronized public boolean hasNext() {\n        //check if there are returned lines\n        if (pending.size() > 0)\n            return true;\n\n        //check if we have already prepared this round and there are lines left in it\n        if (thisRound.size() > 0)\n            return true;\n\n        //we have not prepare the current round, prepare it and check if there is something to give\n        createNextRound();\n        if (thisRound.size() > 0)\n            return true;\n\n        return false;\n    }", "comment": "checks whether there are more lines to give"}, {"path": "./Dataset/funcom_test/29592224.txt", "code": "public DODSStructure findStructureByShortName(String shortName) {\n    if (name == null) return null;\n\n    for (int i=0; i<structures.size(); i++) {\n      DODSStructure v = (DODSStructure) structures.get(i);\n      if (shortName.equals(v.getNameShort()))\n        return v;\n    }\n    return null;\n  }", "comment": "find the structure with the specified short name"}, {"path": "./Dataset/funcom_test/33652999.txt", "code": "public void testMojoLookup() throws Exception {\n        File pluginXml = new File(getBasedir(), \"src/test/resources/pom-modifier-plugin-config.xml\");\n        PomModifierMojo mojo = (PomModifierMojo) lookupMojo(\"update\", pluginXml);\n        assertNotNull(mojo);\n    }", "comment": "test to make sure that the mojo can be found"}, {"path": "./Dataset/funcom_test/42172643.txt", "code": "protected void addDriverClassNamePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_DBDriver_driverClassName_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_DBDriver_driverClassName_feature\", \"_UI_DBDriver_type\"),\n\t\t\t\t DbPackage.Literals.DB_DRIVER__DRIVER_CLASS_NAME,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the driver class name feature"}, {"path": "./Dataset/funcom_test/34599430.txt", "code": "public void setSigmaRx( double newSigmaRx) throws IllegalArgumentException, DimensionMismatchException {\n\t\tif (this.dimension != 6)\n\t\t\tthrow new DimensionMismatchException(this.dimension + \"D-Punkt hat keine X-Drehung\");\n\t\tif (newSigmaRx>0)\n\t\t\tthis.sigmaRx = newSigmaRx;\n\t\telse\n\t\t\tthrow new IllegalArgumentException(\"Standardabweichung muss groesser Null sein \" + newSigmaRx);\n\t}", "comment": "setz die standardabweichung der x drehung"}, {"path": "./Dataset/funcom_test/36760087.txt", "code": "public boolean equals(Object o) {\n\t\tif (o == null) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tTupleDesc td = (TupleDesc) o;\n\t\t\tif (td.numFields() != this.numFields()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (int i = 0; i < this.numFields(); i++) {\n\t\t\t\tif (!this.getType(i).equals(td.getType(i))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (ClassCastException e) {\n\t\t\treturn false;\n\t\t}\n\t}", "comment": "compares the specified object with this tuple desc for equality"}, {"path": "./Dataset/funcom_test/41323900.txt", "code": "public boolean hasRestrictions(MetadataSetAttribute aAttribute) {\n\t\tHashtable<MetadataSetRelationType, Set<Class>> theRelationTable = itsHashtable\n\t\t\t\t.get(aAttribute);\n\t\tif (theRelationTable == null || theRelationTable.isEmpty())\n\t\t\treturn false;\n\t\tfor (Set<Class> theHeuristics : theRelationTable.values()) {\n\t\t\tif (theHeuristics.isEmpty())\n\t\t\t\tcontinue;\n\t\t\tfor (Class o : theHeuristics) {\n\t\t\t\tif (LOMRestrictionHeuristic.class.isAssignableFrom(o))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "comment": "return true if there are some restrictions registered for a attribute"}, {"path": "./Dataset/funcom_test/18524193.txt", "code": "public void testFindLink1() {\n        IE theIE = getIe();\n        Document theDocument = theIE.getDocument();\n        A theA = theDocument.findLink(\"INPUT Test 1\");\n        assertNotNull(theA);\n        assertEquals(\"INPUT Test 1\", theA.getInnerText().trim());\n    }", "comment": "tests the find link method functionality"}, {"path": "./Dataset/funcom_test/4421050.txt", "code": "private int headerLen() {\n        int len = 0;\n        \n        len += 4; // int value of the id-length\n        len += this.id.length(); // id itself\n        len += 4; // int value of the package Number length (int = 4 byte)\n        len += 1; // boolean = one byte\n        \n        return len;\n    }", "comment": "return the length of the header in bytes"}, {"path": "./Dataset/funcom_test/26163250.txt", "code": "protected void dumpErrors() {\n        Collection errors = (Collection) getRequest().getAttribute(\n                Constants.ERRORS);\n        Iterator iterator = errors.iterator();\n        while (iterator.hasNext()) {\n            Exception ex = (Exception) iterator.next();\n            System.out.println(ex.getMessage());  \n        }    \n    }", "comment": "dumps messages from exceptions in errors collection"}, {"path": "./Dataset/funcom_test/33719106.txt", "code": "public void testGetEmail() {\n        System.out.println(\"getEmail\");\n        \n        Email_DBImpl instance = new Email_DBImpl();\n        \n        String expResult = \"\";\n        String result = instance.getEmail();\n        assertEquals(expResult, result);\n        \n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }", "comment": "test of get email method of class com"}, {"path": "./Dataset/funcom_test/43550953.txt", "code": "public MembershipBO create() throws Exception{\n        String id = GUID.generate();\n        MembershipBO bo = new MembershipBO(id);\n        bo.setMembPwd(\"password\");  //hardcoded the membership password for the first iteration\n        Cache c = Cache.getInstance();\n        c.put(bo.getMembershipID(), bo);\n        \n        return bo;\n    }", "comment": "creates a new membership bo object with a newly generated guid"}, {"path": "./Dataset/funcom_test/46106829.txt", "code": "public void setToolTip(String mText, GLFont mFont, int mToolTipTimeInterval) {\n        toolTip = new String(mText);\n        toolTipFont = mFont;\n        toolTipTimeInterval = mToolTipTimeInterval;\n        toolTipCurrentTime = Utils.getTime();\n        toolTipLastTime = toolTipCurrentTime;\n        toolTipPosition = new Dimension(-20, -20);\n    }", "comment": "the default re definition of the tooltip"}, {"path": "./Dataset/funcom_test/19467494.txt", "code": "protected void addMachinePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_IncludedMachine_machine_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_IncludedMachine_machine_feature\", \"_UI_IncludedMachine_type\"),\n\t\t\t\t CompositionmodelPackage.eINSTANCE.getIncludedMachine_Machine(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the machine feature"}, {"path": "./Dataset/funcom_test/18934448.txt", "code": "public void appendFlat(LinearQueue q) {\n\t\tbulkMoveTest(q);\n\t\tfor (int i=0; !q.isEmpty(); i++) try {\n\t\t\tObject o=q.removeFirst();\n\t\t\ttry {\n\t\t\t\tthis.addLast(o);\n\t\t\t} catch (RuntimeException re) {\n\t\t\t\tq.addFirst(o);\n\t\t\t\tthrow re;}\n\t\t} catch (RuntimeException re) {\n\t\t\ttry {\n\t\t\t\twhile (i-->0) q.addFirst(this.removeLast());\n\t\t\t} catch (RuntimeException bah) {\n\t\t\t\tthrow new RollbackError(re, bah);}\n\t\t\tthrow re;}}", "comment": "moves the contents of q to the end of this queue"}, {"path": "./Dataset/funcom_test/43418309.txt", "code": "protected void startAgentsFromCurrAgentList() {\n\t\t\n\t\tfor (Iterator<AgentClassElement4SimStart> iterator = currAgentList.iterator(); iterator.hasNext();) {\n\t\t\tAgentClassElement4SimStart agent2Start = iterator.next();\n\t\t\t// --- Check for start arguments -------------------------\n\t\t\tObject[] startArgs = this.getStartArguments(agent2Start);\n\t\t\t// --- Start the agent -----------------------------------\n\t\t\tthis.startAgent(agent2Start.getStartAsName(), agent2Start.getAgentClassReference(), startArgs);\n\t\t} \n\t}", "comment": "this method will start all agents defined in the agent list"}, {"path": "./Dataset/funcom_test/51024433.txt", "code": "public void init(Collection<EdgeMappingDescriptor> descriptors) {\n\t\t\tid2descriptor.clear();\n\t\t\tcc2descriptorList.clear();\n\t\t\tfor (EdgeMappingDescriptor d: descriptors) {\n\t\t\t\tString id = d.getId();\n\t\t\t\tid2descriptor.put(id,d);\n\t\t\t\t\n\t\t\t\tString ccId = d.getConceptClasses()[0];\n\t\t\t\tArrayList<EdgeMappingDescriptor> list = cc2descriptorList.get(ccId);\n\t\t\t\tif (list == null) {\n\t\t\t\t\tlist = new ArrayList<EdgeMappingDescriptor>();\n\t\t\t\t\tcc2descriptorList.put(ccId, list);\n\t\t\t\t}\n\t\t\t\tlist.add(d);\n\t\t\t}\n\t\t\tsetFocus(getCurrentTreeSelection());\n\t\t}", "comment": "initializes the hashtables with a new set of descriptors"}, {"path": "./Dataset/funcom_test/14467232.txt", "code": "public void dropModel(Model droppedModel, int x, int y) {\n\n    if (droppedModel.getClass() == this.getClass()) {\n      dropModelClone(droppedModel, x, y);\n    } else {\n      dropModelModify(droppedModel, x, y);\n    }\n\n  }", "comment": "adds all constituents of merging model to this code model code"}, {"path": "./Dataset/funcom_test/43040471.txt", "code": "private void addPropertyFor(MethodDeclaration m) {\n\t\tfinal String name = m.getName().getFullyQualifiedName();\n\t\tif (name.length() < 4)\n\t\t\treturn;\n\t\tfinal int argCnt = m.parameters().size();\n\t\tfinal boolean get = name.startsWith(\"get\");\n\t\tfinal boolean is = name.startsWith(\"is\");\n\t\tif (argCnt == 0 && (get || is) || argCnt == 1 && name.startsWith(\"set\"))\n\t\t\tbuildProperty(Introspector.decapitalize(name.substring(is ? 2 : 3)), m, get | is);\n\t}", "comment": "adds the property represented by the given method if any"}, {"path": "./Dataset/funcom_test/42171815.txt", "code": "protected void addParamDatatypePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_SetQueryParam_paramDatatype_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_SetQueryParam_paramDatatype_feature\", \"_UI_SetQueryParam_type\"),\n\t\t\t\t ActionStepPackage.eINSTANCE.getSetQueryParam_ParamDatatype(),\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the param datatype feature"}, {"path": "./Dataset/funcom_test/22323120.txt", "code": "protected OutputStream getCompressedOutputStream(File f) throws IOException{\n        OutputStream os = new BufferedOutputStream(new FileOutputStream(f));\n        if (getCompressionFormat() == ZIP) {\n            ZipOutputStream ret = new ZipOutputStream(os);\n            ret.putNextEntry(new ZipEntry(logName));\n            return ret;\n        } else { \n            return new GZIPOutputStream(os);\n        }\n    }", "comment": "hook method that creates an output stream that will compress the data"}, {"path": "./Dataset/funcom_test/35245541.txt", "code": "public int getNumberPageSearchEmployeeByEmployeeID(String SearchContent) throws SQLException {\n        CallableStatement cs = conn.prepareCall(\"{call getNumberPageSearchEmployeeByEmployeeID(?)}\");\n        cs.setString(1, SearchContent);\n        ResultSet rs = cs.executeQuery();\n        if (rs.next()) {\n            return rs.getInt(\"NumberPage\");\n        }\n        return 0;\n    }", "comment": "get number of page of search employee by employee id"}, {"path": "./Dataset/funcom_test/38222302.txt", "code": "private ModuleExecutable getModuleExecutable() {\n    Iterator executables = context.getRelatedNode().getModuleDef().\n      getExecutables().iterator();\n    while (executables.hasNext()) {\n      ModuleExecutable current = (ModuleExecutable) executables.next();\n      if (current.getExecType() == ExecType.EXEC_JAVA)\n        return current;\n    }\n    return null;\n  }", "comment": "gets the module executable configuration"}, {"path": "./Dataset/funcom_test/51728448.txt", "code": "private ArrayList getFunAppArgs(Expr expr) {\n        ArrayList ret = new ArrayList();\n        expr = expr.stripOutermostParens();\n        while (expr instanceof FunApp) {\n            Expr func = ((FunApp)expr).getFunc();\n            Expr arg = ((FunApp)expr).getArg();\n            ret.add(arg.stripOutermostParens());\n            expr = func.stripOutermostParens();\n        }\n        return ret;\n    }", "comment": "this method returns the arguments striped of parens"}, {"path": "./Dataset/funcom_test/43419106.txt", "code": "private JSplitPane getJSplitPaneControlls() {\n\t\tif (jSplitPaneControlls == null) {\n\t\t\tjSplitPaneControlls = new JSplitPane();\n\t\t\tjSplitPaneControlls.setOrientation(JSplitPane.VERTICAL_SPLIT);\n\t\t\tJScrollPane scpTree = new JScrollPane();\n\t\t\tscpTree.setViewportView(getTreeEnvironment());\n\t\t\tjSplitPaneControlls.setTopComponent(scpTree);\n\t\t\tjSplitPaneControlls.setBottomComponent(getTpSettings());\n\t\t\tjSplitPaneControlls.setDividerLocation(150);\n\t\t}\n\t\treturn jSplitPaneControlls;\n\t}", "comment": "this method initializes sp controlls"}, {"path": "./Dataset/funcom_test/46998303.txt", "code": "protected void installListeners() {\n        installMouseListeners();\n        selectionListener = createSelectionListener();\n        propertyChangeListener = createPropertyChangeListener();\n        ListSelectionModel listselectionmodel = pane.getPageSelectionModel();\n        if (listselectionmodel != null) {\n            listselectionmodel.addListSelectionListener(selectionListener);\n        }\n        pane.addPropertyChangeListener(propertyChangeListener);\n    }", "comment": "installs listeners on the component"}, {"path": "./Dataset/funcom_test/18251253.txt", "code": "private String indentSpaces(int indent) {\n        StringBuffer result = new StringBuffer();\n        for (int i = 1; i < indent; ++i) {\n            for (int j = 0; j < 8; ++j) {\n                result.append(\"&nbsp;\");\n            }\n        }\n        return result.toString();\n    }", "comment": "returns space string of given length"}, {"path": "./Dataset/funcom_test/39298982.txt", "code": "protected void setTimeInterval(TimeInterval timeInterval) {\n        if(timeInterval == null) {\n            throw new IllegalArgumentException();\n        }\n        if(! timeInterval.isOpenTimeInterval()) {\n            throw new IllegalArgumentException(\"the agentwise.simulator.dynamics.time interval of an activity must be an OPEN interval\");\n        }\n        this.timeInterval = timeInterval;\n    }", "comment": "changes the agentwise"}, {"path": "./Dataset/funcom_test/24244305.txt", "code": "public Rectangle getRectangle(int id) {\n\t\tfor(int i=0;i<4;i++) buf[i] = 0;\n\t\tgetData(0x44 + (id * 5), buf, 4);\n\t\treturn new Rectangle(buf[0] & 0xFF, buf[1] & 0xFF,\n\t\t\t\t(buf[2] & 0xFF) - (buf[0] & 0xFF),\n\t\t\t\t(buf[3] & 0xFF) - (buf[1] & 0xFF));\n\t}", "comment": "get the rectangle containing a tracked object"}, {"path": "./Dataset/funcom_test/12533135.txt", "code": "protected void outsideSpatialModelHandler(CoordinateIfc coordinate) {\n\t\tif (myOSMHandler != null)\n\t\t\tmyOSMHandler.handleOutsideSpatialModel(this, coordinate);\n\t\telse\n\t\t\tthrow new IllegalArgumentException(\"The coordinate (x1= \" + coordinate.getX1()\n\t\t\t\t\t+ \",x2= \" + coordinate.getX2() + \",x3= \" + coordinate.getX3() +\") is not contained in the spatial model.\");\n\t}", "comment": "this method is called if the destination is outside of the elements"}, {"path": "./Dataset/funcom_test/45957119.txt", "code": "public Person getPersonByVgrId(String vgrId) throws KivException {\n    AndFilter andFilter = new AndFilter();\n    andFilter.and(new EqualsFilter(\"cn\", vgrId));\n    return this.searchPerson(\"cn=\" + vgrId + \",\" + PERSON_SEARCH_BASE.toString(), SearchControls.OBJECT_SCOPE, andFilter.encode());\n  }", "comment": "fetch a person by vgr id"}, {"path": "./Dataset/funcom_test/50717769.txt", "code": "public Dimension preferredLayoutSize(Container parent) {\n\n      Insets insets = parent.getInsets();\n      getGridSizes(parent, false);\n      return new Dimension(insets.left + insets.right + sum(col_widths)\n                      + (col_widths.length+1)*hgap,\n                      insets.top + insets.bottom + sum(row_heights)\n                      + (row_heights.length+1)*vgap);\n   }", "comment": "calculates the preferred size for this layout"}, {"path": "./Dataset/funcom_test/7370287.txt", "code": "public File extractBookmarks(String result){\n\t\ttry {\n\t        List<HashMap<String,Object>> list = SimpleBookmark.getBookmark(reader);\n\t        if (list == null){\n\t        \treturn null;\n\t        }\n\t        else{\n\t        \tFile file = new File(result);\n\t\t\t\tFileOutputStream fop = new FileOutputStream(file);\n\t        \tSimpleBookmark.exportToXML(list, fop, \"ISO8859-1\", true);\n\t        \tfop.flush();\n\t        \tfop.close();\n\t        \treturn file;\n\t        }\n\t        \n\t        \n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n    }", "comment": "extract bookmarks and save as xml"}, {"path": "./Dataset/funcom_test/3725081.txt", "code": "public String submitJob(JobDefinition jobDef) throws SecurityException, IOException, DRMException {\n\n\t\tif (jobDef == null) {\n\t\t\tlogger.debug(\"null job definition\");\n\t\t\tthrow new NullPointerException();\n\t\t}\n\n\t\tJob job = null;\n\t\tQueue queue = new Queue(null, contactHost, contactPort, contactTimeout);\n\t\ttry {\n\t\t\tjob = queue.submitJob(jobDef);\n\t\t} catch (Exception e) {\n\t\t\tthrow new DRMException(2000, e.getMessage());\n\t\t}\n\n\t\treturn (job.getJobId());\n\t} // End of submitJob", "comment": "submit a job to the cluster"}, {"path": "./Dataset/funcom_test/24244174.txt", "code": "public int sendData(int register, byte [] data, int length) {\n\t\tbyte [] txData = {address, (byte) register};\n\t\tbyte [] sendData = new byte[length+2];\n\t\tSystem.arraycopy(txData,0,sendData,0,2);\n\t\tSystem.arraycopy(data,0,sendData,2,length);\n\t\ttry {\n\t\t\treturn nxtCommand.LSWrite(this.port, sendData, (byte)0);\n\t\t} catch (IOException ioe) {\n\t\t\tSystem.out.println(ioe.getMessage());\n\t\t\treturn -1;\n\t\t}\n\t}", "comment": "send data top the sensor"}, {"path": "./Dataset/funcom_test/22622679.txt", "code": "public void setLastEditor(String userName) {\n\t\ttry {\n\t\t\tNode node = getNode(\"/dcsDataRecord/lastEditor\");\n\t\t\tif (node == null)\n\t\t\t\tnode = this.doc.getRootElement().addElement(\"lastEditor\");\n\t\t\t((Element)node).setText(userName);\n\t\t} catch (Throwable e) {\n\t\t\tprtlnErr(\"setLastEditor failed: \" + e.getMessage());\n\t\t}\n\t}", "comment": "sets the last editor attribute of the dcs data record object"}, {"path": "./Dataset/funcom_test/51022573.txt", "code": "public void showNodeLabels(boolean show) {\n\t\tif (show) {\n\t\t\tviewer.getMetaGraphPanel()\n\t\t\t\t\t.getVisualizationViewer()\n\t\t\t\t\t.getRenderContext()\n\t\t\t\t\t.setVertexLabelTransformer(\n\t\t\t\t\t\t\tnew ONDEXMetaConceptLabels(viewer\n\t\t\t\t\t\t\t\t\t.getONDEXJUNGGraph()));\n\t\t} else {\n\t\t\tviewer.getMetaGraphPanel()\n\t\t\t\t\t.getVisualizationViewer()\n\t\t\t\t\t.getRenderContext()\n\t\t\t\t\t.setVertexLabelTransformer(\n\t\t\t\t\t\t\tnew Transformer<ONDEXMetaConcept, String>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic String transform(ONDEXMetaConcept input) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t}\n\t\tupdateMenuBar();\n\t\tviewer.getMetaGraphPanel().repaint();\n\t}", "comment": "sets whether or not to show labels on nodes"}, {"path": "./Dataset/funcom_test/42172615.txt", "code": "protected void addSafiServerPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_TelephonySubsystem_safiServer_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_TelephonySubsystem_safiServer_feature\", \"_UI_TelephonySubsystem_type\"),\n\t\t\t\t ConfigPackage.Literals.TELEPHONY_SUBSYSTEM__SAFI_SERVER,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t true,\n\t\t\t\t null,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the safi server feature"}, {"path": "./Dataset/funcom_test/31898247.txt", "code": "public JTextField getNameField() {\n    /* Returns the nameField property value. */\n    if (fieldNameField == null) {\n      try {\n        fieldNameField = new JTextField();\n      } catch (Throwable exception) {\n        System.err.println(\"Exception creating nameField property.\");\n      }\n    };\n\n    return fieldNameField;\n  }", "comment": "gets the name field property javax"}, {"path": "./Dataset/funcom_test/34609094.txt", "code": "public boolean covers(GrammaticalProperties properties) {\n        for (final Iterator it = properties.getTags().iterator(); it.hasNext();) {\n            GrammaticalTag tag = (GrammaticalTag) it.next();\n            if (!tags.containsKey(tag.getSymbol())) {\n                return false;\n            }\n        }\n        return true;\n    }", "comment": "checks if this grammatical properties contains all tags represented by the given properties"}, {"path": "./Dataset/funcom_test/12725660.txt", "code": "private JPanel getDescription() {\n\t\tif (Description == null) {\n\t\t\tGridBagConstraints gridBagConstraints = new GridBagConstraints();\n\t\t\tgridBagConstraints.fill = GridBagConstraints.BOTH;\n\t\t\tgridBagConstraints.weighty = 1.0;\n\t\t\tgridBagConstraints.weightx = 1.0;\n\t\t\tDescriptionTitle = new JLabel();\n\t\t\tDescriptionTitle.setText(\"Description\");\n\t\t\tDescription = new JPanel();\n\t\t\tDescription.setLayout(new BorderLayout());\n\t\t\tDescription.setBackground(new Color(192, 218, 255));\n\t\t\tDescription.add(DescriptionTitle, BorderLayout.NORTH);\n\t\t\tDescription.add(getDescriptionText(), BorderLayout.SOUTH);\n\t\t}\n\t\treturn Description;\n\t}", "comment": "this method initializes description"}, {"path": "./Dataset/funcom_test/41286988.txt", "code": "public void draw(Graphics2D g2){\n       g2.setColor(UIConstants.CONNECTION_POINT_COLOUR);\n        \n       Rectangle extClip = g2.getClipBounds().getBounds();\n       extClip.grow(5, 5);\n       for(GridObject p: grid.values()){           \n           if(extClip.contains(p)){\n            p.draw(g2);\n           }\n       }               \n    }", "comment": "draw the grid"}, {"path": "./Dataset/funcom_test/22626951.txt", "code": "private String getFormatTypeToIndex() {\n\t\t// Format type 'canonical_nsdl_dc' or 'native'\n\t\tString formatType = configXmlDoc.valueOf(\"/NFR_Collections/ncsManagedCollections/formatType\");\n\t\tif (formatType == null || formatType.trim().length() == 0 || !(formatType.equalsIgnoreCase(\"canonical_nsdl_dc\") || formatType.equalsIgnoreCase(\"native\")))\n\t\t\tformatType = \"canonical_nsdl_dc\";\n\t\treturn formatType;\n\t}", "comment": "gets the format type one of canonical nsdl dc or native"}, {"path": "./Dataset/funcom_test/38756063.txt", "code": "public void firstAction() {\n        if (current != null && currentAction != 0) {\n            for (int i = currentAction; i > 0; i--) {\n                if (!previousAction())\n                    break;\n            }\n            currentAction = 0;\n            getPortunesController().notifyObservers(Message.ACTION_CHANGED);\n        }\n    }", "comment": "go to the first action"}, {"path": "./Dataset/funcom_test/34425716.txt", "code": "private void actionLoadNotes() {\n        enableUserActions(false);\n\n        // set focus, otherwise it gives focus to \"clear\" >> scary/not wanted\n        multiSubmitButton.requestFocusInWindow();\n\n        resetSingleTextFields();\n        multipleGUIList.clearSelection();\n        multipleResources = loadNotesFile();\n        updateMultiList();\n        enableUserActions(true);\n    }", "comment": "called when the user selects to load the in game notes file"}, {"path": "./Dataset/funcom_test/37562363.txt", "code": "public void setForeground (Color color) {\n  checkWidget ();\n  if (color != null && color.isDisposed ()) {\n    SWT.error (SWT.ERROR_INVALID_ARGUMENT);\n  }\n  handle.setForeground(color == null? null: color.handle);\n  ((CTree)parent.handle).getModel().nodeChanged((TreeNode)handle);\n  parent.handle.repaint();\n}", "comment": "sets the receivers foreground color to the color specified"}, {"path": "./Dataset/funcom_test/42292201.txt", "code": "public boolean removeVertex(int v) {\n\t\t\n\t\tif(this.containsVertex(v)) {\n\t\t\tVertex tmp;\n\t\t\tfor(Iterator<Vertex> i = vertexList.iterator(); i.hasNext(); ) {\n\t\t\t\ttmp = i.next();\n\t\t\t\tif(tmp.getId() == v)\n\t\t\t\t\ti.remove();\n\t\t\t\t\n\t\t\t\tif(tmp.hasPre(v))\n\t\t\t\t\ttmp.removePre(v);\n\t\t\t\t\n\t\t\t\tif(tmp.hasSuc(v))\n\t\t\t\t\ttmp.removeSuc(v);\n\t\t\t}\n\t\t\treturn true;\t\t\t\t\t\n\t\t} \n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t}", "comment": "removes vertex with id v from graph"}, {"path": "./Dataset/funcom_test/26137991.txt", "code": "private Path makeFollowPath(int steps) {\n        \t\n        \t// TODO Use order-2 beziers instead\n            Path p = new Path();\n            p.moveTo(0, 0);\n            for (int i = 0; i < steps; i++) {\n                p.lineTo(i/(float) steps, 0.2f * (float) Math.pow(-1, i));\n            }\n            return p;\n        }", "comment": "makes a wiggly horizontal path"}, {"path": "./Dataset/funcom_test/40018864.txt", "code": "protected void setTargetVelocity(int i) {\n        Vector resultV = new Vector(0, 0);\n        Particle p = (Particle) ((Gui) parent).getTargets().get(i);\n        resultV = new Vector(p.loc);\n        resultV.sub(loc);\n        resultV.normalize();\n        vel.add(resultV);\n        vel.normalize();\n    }", "comment": "add a velocity where the target find target"}, {"path": "./Dataset/funcom_test/7316081.txt", "code": "private void initTabbedPane() {\n\t\tlogger.debug(\"initTabbedPane()\"); //$NON-NLS-1$\n\t\tinitProgramInfoPanel();\n\t\tinitSystemInfoPanel();\n\n\t\ttabbedPane = new JTabbedPane();\n\t\ttabbedPane.addTab(Messages.getString(\"AboutDialog.program_info\"), //$NON-NLS-1$\n\t\t\t\tprogramInfoPanel); \n\t\ttabbedPane.addTab(Messages.getString(\"AboutDialog.system_info\"),  //$NON-NLS-1$\n\t\t\t\tsystemInfoPanel); \n\t}", "comment": "initializes the code jtabbed pane code the tabs for"}, {"path": "./Dataset/funcom_test/19497685.txt", "code": "public void testDelta_02_initCtxSequent() throws Exception {\n\t\tIContextRoot root = createContext(\"ctx\");\n\t\taddAxioms(root, makeSList(\"T\"), makeSList(\"\u2115\u2260\u2205\"), true);\n\t\tsaveRodinFileOf(root);\n\t\n\t\trunBuilder();\n\t\t\n\t\thasStamp(root.getPORoot().getSequents()[0], IPOStampedElement.INIT_STAMP);\n\t\t\n\t}", "comment": "verifies that sequents created initially receive"}, {"path": "./Dataset/funcom_test/13483193.txt", "code": "private void finalize(ExprInfo exprInfo) {\n        // We assume that all availDef for exprInfo are tack.\n        // Perform a perorder traversal of the dominance tree. Remember that\n        // the root of the dominance tree is also the root of the CFG.\n        finalizeVisit(exprInfo, cfg.source(), null);\n    }", "comment": "finalize is the final step in preparing for the placement of temporaries"}, {"path": "./Dataset/funcom_test/46708875.txt", "code": "public int write(byte[] b, int off) {\n    int nBytes = super.write(b, off);\n    nBytes += writeLEInt(b, off + nBytes, SHAPE_TYPE_POINT);\n    nBytes += writeLEDouble(b, off + nBytes, x);\n    nBytes += writeLEDouble(b, off + nBytes, y);\n    return nBytes;\n    }", "comment": "writes this point to the given buffer at the given offset"}, {"path": "./Dataset/funcom_test/36635015.txt", "code": "public File getResourceFile(String filename){\n        File newFile = null;\n\n        URL tempURL = Thread.currentThread().getContextClassLoader()\n            .getResource(filename);\n        if(tempURL != null){\n            try {\n                newFile = new File(tempURL.toURI());\n            } catch (URISyntaxException ex) {\n                warn(\"File Resource Error! \"+filename);\n            }\n        }\n\n        return newFile;\n    }", "comment": "this function gets a file directly from the"}, {"path": "./Dataset/funcom_test/19349533.txt", "code": "public void setMonthFont(final Font monthFont) {\n\t\tthis.monthFont = monthFont;\n\t\t\n\t\t// Recalculate HEADER_HEIGHT\n\t\tfinal FontRenderContext context = new FontRenderContext(new AffineTransform(), false,false);\n\t\tfinal GlyphVector glyphVector = monthFont.createGlyphVector(context, \"Month\");\n\t\t//int stringWidth = (int)glyphVector.getLogicalBounds().getWidth();\n\t\tHEADER_HEIGHT = (int)glyphVector.getLogicalBounds().getHeight() + 5;\n\t}", "comment": "this method sets the font used to draw the month and year"}, {"path": "./Dataset/funcom_test/23010205.txt", "code": "protected void addExitAssignementPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_Exit_ExitAssignement_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_Exit_ExitAssignement_feature\", \"_UI_Exit_type\"),\n\t\t\t\t TaEditorPackage.Literals.EXIT__EXIT_ASSIGNEMENT,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the exit assignement feature"}, {"path": "./Dataset/funcom_test/19507018.txt", "code": "public void testNextSiblingInexistent() throws Exception {\n\t\tfinal NamedElement ne = getNamedElement(root, \"foo\");\n\t\ttry {\n\t\t\tne.getNextSibling();\n\t\t\tfail(\"should have raised an exception\");\n\t\t} catch (RodinDBException e) {\n\t\t\tIRodinDBStatus st = e.getRodinDBStatus();\n\t\t\tassertTrue(st.isDoesNotExist());\n\t\t\tassertEquals(Arrays.asList(ne), Arrays.asList(st.getElements()));\n\t\t}\n\t}", "comment": "ensures that trying to access to the next sibling of an inexistent"}, {"path": "./Dataset/funcom_test/51791511.txt", "code": "private void initializeContactList() throws FlickrDesktopException  {\n\t\tSortedSet<Contact> usercontacts = this.flickrSystem.getPublicContacts();\n\t\tthis.contactList.add(this.flickrSystem.getCurrentUserName());\n\t\tfor (Iterator<Contact> iter = usercontacts.iterator(); iter.hasNext();) {\n\t\t\tContact friend = iter.next();\n\t\t\tthis.contacts.put(friend.getUsername(), friend);\n\t\t\tthis.contactList.add(friend.getUsername());\n\t\t}\n\t}", "comment": "sets the contents of the users combo box to the current users contacts"}, {"path": "./Dataset/funcom_test/19466347.txt", "code": "protected void addBasePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_AddressedVariable_base_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_AddressedVariable_base_feature\", \"_UI_AddressedVariable_type\"),\n\t\t\t\t TaskingPackage.Literals.ADDRESSED_VARIABLE__BASE,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the base feature"}, {"path": "./Dataset/funcom_test/19498213.txt", "code": "public void testCarrierSets_02_twoCarrierSetsNameConflict() throws Exception {\n\t\tIContextRoot con = createContext(\"ctx\");\n\n\t\taddCarrierSets(con, makeSList(\"S1\", \"S1\"));\n\t\t\n\t\tsaveRodinFileOf(con);\n\t\t\n\t\trunBuilder();\n\t\t\n\t\tISCContextRoot file = con.getSCContextRoot();\n\t\t\n\t\tcontainsCarrierSets(file);\n\t\t\t\t\n\t\thasMarker(con.getCarrierSets()[0]);\n\t\thasMarker(con.getCarrierSets()[1]);\n\t}", "comment": "name conflict between two carrier sets"}, {"path": "./Dataset/funcom_test/45957381.txt", "code": "private void addNameToList(String key, String value, Map<String, List<String>> map) {\n    List<String> list = map.get(key);\n    if (list == null) {\n      list = new ArrayList<String>();\n      map.put(key, list);\n    }\n    if (!list.contains(value)) {\n      list.add(value);\n    }\n  }", "comment": "helper method for adding a name to the correct list of the map"}, {"path": "./Dataset/funcom_test/45005478.txt", "code": "public void updateUnitData(StringTokenizer st) {\n        try {\n            CUnit currUnit = getUnit(TokenReader.readInt(st));\n            currUnit.setData(TokenReader.readString(st));\n            sortHangar();// properties have changes. sort. YARR!\n        } catch (Exception e) {\n            CampaignData.mwlog.errLog(e);\n            return;\n        }\n    }", "comment": "called by pl uu updates a units data"}, {"path": "./Dataset/funcom_test/14467557.txt", "code": "public int getRowCount() {\n    if( this.constituent == null )\n      return 0;\n\n    int rowCount = 0;\n    Iterator i = this.constituent.getAttributes().values().iterator();\n    while( i.hasNext() )\n    {\n      BelAttribute attr = (BelAttribute) i.next();\n      if( attr.isVisible() )\n        rowCount++;\n    }\n\n    return rowCount;\n  }", "comment": "returns the number of rows to display in the table"}, {"path": "./Dataset/funcom_test/22625857.txt", "code": "public String getEndTime() {\n\t\tString t = doc.get(\"endtime\");\n\n\t\tif (t == null)\n\t\t\treturn DEFAULT;\n\t\tlong time = -1;\n\t\ttry {\n\t\t\ttime = DateFieldTools.stringToTime(t);\n\t\t} catch (ParseException pe) {\n\t\t\tprtlnErr(\"Error in getEndTime(): \" + pe);\n\t\t}\t\t\t\n\t\tif (time <= 0)\n\t\t\treturn \"Unknown\";\n\n\t\treturn new SimpleDateFormat(\"h:mm:ss a zzz, EEE MMM d, yyyy\").format(new Date(time));\n\t}", "comment": "gets the end time attribute of the harvest log reader object"}, {"path": "./Dataset/funcom_test/34426147.txt", "code": "private Component makeBottomPanel() {\n        bottomPanel = Box.createHorizontalBox();\n\n        bottomPanel.add(makeAssigneeComboBox());\n        bottomPanel.add(makeClearButton());\n        bottomPanel.add(makeResourceClassCombo());\n        bottomPanel.add(Box.createRigidArea(new Dimension(0, 0))); // size later\n        makeStatFilterFields(bottomPanel);\n\n        return bottomPanel;\n    }", "comment": "creates and returns the gui component for the bottom area of this tab"}, {"path": "./Dataset/funcom_test/26615928.txt", "code": "public String toString() {\n        String s = \"\";\n\n        s += \"Name: \" + name + \"\\n\";\n        s += \"Number of neurons: \" + neurons.size() + \"\\n\";\n\n        for (int i = 0; i < neurons.size(); i++) {\n            Neuron n = (Neuron) neurons.elementAt(i);\n\n            s += n.toString() + \"\\n\";\n        }\n\n        return s;\n    }", "comment": "returns a string representation of this layer"}, {"path": "./Dataset/funcom_test/34518063.txt", "code": "public String getAuthServer() {\n\t\tif (this.xml==null) return \"\";\n\t\tif (this.authserver.equals(\"\")) {\n\t\t\tElement tmp=(Element)this.xml.selectSingleNode(\"/poll/manifest/authserver\");\n\t\t\tif (tmp==null) { //fallback to previous implementation\n\t\t\t\ttmp=(Element)this.xml.selectSingleNode(\"/poll/manifest/authservers/authserver\");\n\t\t\t}\n\t\t\tthis.authserver=tmp.attribute(\"url\").getText();\n\t\t}\n\t\treturn this.authserver;\n\t}", "comment": "return the authserver url"}, {"path": "./Dataset/funcom_test/22624034.txt", "code": "public void fetchStandardsDocs(List docIds) throws ValidatingServiceException {\n\t\tprtln(\"fetchStandardsDocs to fetch \" + docIds.size() + \" docs\");\n\t\t\n\t\tif (isProcessing) {\n\t\t\tprtln(\"ALERT: isProcessing!\");\n\t\t\treturn;\n\t\t}\n\t\tisProcessing = true;\n\t\tthis.ignoreCachedValidation = ignoreCachedValidation;\n\n\t\t// Here is where we would obtain lock on records to validate!\n\n\t\ttry {\n\t\t\tnew AsnFetchThread(docIds).start();\n\t\t} catch (Throwable t) {\n\t\t\tprtln(\"WARNING: validate Records: \" + t.getMessage());\n\t\t}\n\t}", "comment": "validate a set of records in a separate thread"}, {"path": "./Dataset/funcom_test/122853.txt", "code": "public Hashtable getModelParameters() {\n    Hashtable props = new Hashtable(23);\n    if (model != null) {\n      model.clearPropertyListeners();\n      try {\n        props = ParameterUtility.getModelProperties(model);\n      } catch (Exception ex) {\n        SimUtilities.showError(\"Error retrieving model properties\", ex);\n        System.exit(0);\n      }\n    }\n\n    return props;\n  }", "comment": "gets the parameters of the current loaded model"}, {"path": "./Dataset/funcom_test/51169773.txt", "code": "synchronized public void setSeed(long value) {\n    super.setSeed(value);\n\n    int seed = (int) value;\n    values = new int[MAX];\n\n    for (index = 0; index < MAX; index++) {\n      values[index] = seed & MASK;\n      seed = (MULTIPLIER * seed) + 1;\n      values[index] |= (seed & MASK) >>> 16;\n      seed = (MULTIPLIER * seed) + 1;\n    }\n  }", "comment": "initalize the pseudo random number generator"}, {"path": "./Dataset/funcom_test/37563349.txt", "code": "public Rectangle getBounds() {\n\tif (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n  java.awt.Rectangle bounds = handle.getBounds();\n  return new Rectangle((int)bounds.getX(), (int)bounds.getY(), (int)bounds.getWidth(), (int)bounds.getHeight());\n}", "comment": "returns a rectangle which represents the rectangular"}, {"path": "./Dataset/funcom_test/8252771.txt", "code": "public void addChild(TrackNode child){\n        this.children.add(child);\n        child.parent = this;\n        remainingEcho++;\n        ////////////////////////////////////////////\n    }", "comment": "function adds child into the parent track"}, {"path": "./Dataset/funcom_test/44521826.txt", "code": "public boolean isWielded(Thing item) {\n      boolean result=false;\n      for (int i = 0; i < invcount; i++) {\n         Thing t = inv[i];\n         if (t.getFlag(\"IsItem\")&&(t.y > 0) && t==item ) {\n            return true;\n         }\n      }\n      return result;\n   }", "comment": "checks if a thing is wielded"}, {"path": "./Dataset/funcom_test/34415330.txt", "code": "public void sendContainerChangeEvent(Object source, String containerId, String userName, Date dateTime){\n\t\tViewEvent ve = new ViewEvent(source,containerId,\"\",userName,dateTime,ViewEvent.CONTAINER_CHANGE_EVENT, null);\n\t\tthis.newViewEvent(ve);\n\t}", "comment": "initiates a container change event for use by the organiser"}, {"path": "./Dataset/funcom_test/10578061.txt", "code": "public void updateHamTokens(Connection conn) throws java.sql.SQLException {\n        updateTokens(conn, getHamTokenCounts(), sqlQueries.getSqlString(\"insertHamToken\", true), sqlQueries.getSqlString(\"updateHamToken\", true));\n\n        setMessageCount(conn, sqlQueries.getSqlString(\"updateHamMessageCounts\", true), getHamMessageCount());\n    }", "comment": "updates the database with new ham token frequencies"}, {"path": "./Dataset/funcom_test/35556248.txt", "code": "public boolean registerClient(int userId, ClientInterface clientInterface) {\n\n\t\tboolean result = false;\n\n\t\tif (DBManager.getEmsOprType() == DBManager.SINGLE_CONNECTION) {\n\t\t\tresult = serverReceiver.registerClientLocal(userId, clientInterface);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tif (serverInterface != null) {\n\t\t\t\t\tresult = serverInterface.registerClient(userId, clientInterface);\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlogger.log(Level.SEVERE, \"registerClient Exception\", ex);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}", "comment": "method of registering client"}, {"path": "./Dataset/funcom_test/22626563.txt", "code": "public String getFilePathForId(MmdRec rec) {\n\t\tif (rec == null) {\n\t\t\t//prtln(\"getFilePathForId() Error: ID map record is null\");\n\t\t\treturn \"\";\n\t\t}\n\t\tString pathToRecord = collBaseDir + \"/\"\n\t\t\t + rec.metastyleNames[rec.getMetastyle()]\n\t\t\t + \"/\" + rec.getCollKey() + \"/\" + rec.getFileName();\n\t\treturn pathToRecord;\n\t}", "comment": "gets the file path for id attribute of the record data service object"}, {"path": "./Dataset/funcom_test/22171678.txt", "code": "protected void addCurrentTimePropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_EveHistoryTimer_currentTime_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_EveHistoryTimer_currentTime_feature\", \"_UI_EveHistoryTimer_type\"),\n\t\t\t\t TimerPackage.Literals.EVE_HISTORY_TIMER__CURRENT_TIME,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the current time feature"}, {"path": "./Dataset/funcom_test/22407730.txt", "code": "private String getShortFileName(final String filename) {\n        if ((srcFiles == null) || (filename == null)) {\n            return filename;\n        }\n\n        final Iterator iterator = srcFiles.iterator();\n\n        while (iterator.hasNext()) {\n            final String srcFileName = (String) iterator.next();\n\n            if (filename.startsWith(srcFileName)) {\n                return filename.substring(srcFileName.length() + 1);\n            }\n        }\n\n        return filename;\n    }", "comment": "get the file name relative to one of the source paths"}, {"path": "./Dataset/funcom_test/26501489.txt", "code": "public void dispatch(String type, Object data) throws IOException {\n    if(Log.isDebug()){\n      Log.debug(getClass(), \"Sending event \" + type + \" - \" + data);\n    }\n    _broadcast.dispatch(_consumer.getDomainName().toString(), type, data);\n  }", "comment": "dispatches the given data to all nodes in this instances domain"}, {"path": "./Dataset/funcom_test/13279656.txt", "code": "protected void fireChange(Object changedObject) {\n\n\t\t \n\t\t ChangeEvent simpleChangeEvent = new ChangeEvent(changedObject);\n\n\t\t \n\t\t Object[] listeners = listenerList.getListenerList();\n\t\t ChangeListener listener = null;\n\n\t\t for (int i = listeners.length - 2; i >= 0; i -= 2) {\n\t\t\t if (listeners[i] == ChangeListener.class) {\n\n\t\t\t\t ((ChangeListener) listeners[i + 1]).stateChanged( simpleChangeEvent );\n\n\t\t\t }\n\n\t\t }\n\t }", "comment": "this method supports normal change listeners"}, {"path": "./Dataset/funcom_test/4086559.txt", "code": "public void setFuncion(String v) {\n    if (Adjetivo_Type.featOkTst && ((Adjetivo_Type)jcasType).casFeat_Funcion == null)\n      jcasType.jcas.throwFeatMissing(\"Funcion\", \"org.idtem.component.freeling.Adjetivo\");\n    jcasType.ll_cas.ll_setStringValue(addr, ((Adjetivo_Type)jcasType).casFeatCode_Funcion, v);}", "comment": "setter for funcion sets"}, {"path": "./Dataset/funcom_test/18912425.txt", "code": "protected void tellAgain(final QName message) throws RemoteException{\n\t\tfinal AbstractCoordParticipantProxy proxy =\n\t\t\tthis.getParticipantProxy();\n\n\t\tif (State.MESSAGE_CANCEL.equals(message)){\n\t\t\tproxy.cancelOperation(null);\n\t\t\t\n\t\t}else if (State.MESSAGE_COMPENSATE.equals(message)){\n\t\t\tproxy.compensateOperation(null);\n\n\t\t}else if (State.MESSAGE_CLOSE.equals(message)){\n\t\t\tproxy.closeOperation(null);\n\t\t\t\n\t\t}else if (State.MESSAGE_EXITED.equals(message)){\n\t\t\tproxy.exitedOperation(null);\n\t\t\t\n\t\t}else if (State.MESSAGE_FAULTED.equals(message)){\n\t\t\tproxy.faultedOperation(null);\n\t\t\t\n\t\t}else if (State.MESSAGE_GETSTATUS.equals(message)){\n\t\t\tproxy.getStatusOperation(null);\n\t\t\t\n\t\t}else{\n\t\t\tthrow new IllegalArgumentException(\"Sorry, cannot tell a participant \"+message);\n\t\t}\n\t}", "comment": "forward some message to the participant"}, {"path": "./Dataset/funcom_test/19469740.txt", "code": "public String getLabel() {\n\t\tif (getType()!=null){\n\t\t\t//return ((UMLBelement)getExtends()).getContaining(UMLBPackage.eINSTANCE.getUMLBconstruct()).getName()+\"::\"+((UMLBelement)getType()).getName();\n\t\t\treturn ((UMLBelement)getType()).getName(); \n\t\t}\n\t\telse return null;\n\t}", "comment": "get the label for this umlbextended class type"}, {"path": "./Dataset/funcom_test/33692374.txt", "code": "public void onCallTransferFailure( ExtendedCall call, String reason, Message notify ) {\n\n    \tlog.debug( \"onCallTransferFailure\", \"Init...\" );\n        \n        if ( call != this.call ) {\n        \tlog.debug( \"onCallTransferFailure\", \"NOT the current call.\" );\n            return;\n        }\n        \n        log.debug( \"onCallTransferFailure\", \"Transfer failed.\" );\n    }", "comment": "callback function called when a call transfer is not sucessfully"}, {"path": "./Dataset/funcom_test/20787277.txt", "code": "public void setGesture(GestureSample3D gs) {\n\t\t//System.err.println(\"SAMPLE : \" + gs.getName());\n\t\tthis.gs = gs;\n//\t\tif(gs != null){\n//\t\t\tSystem.err.println(\"WiiReaderPanel.setGesture() Displaying: \" + gs.getName());\n//\t\t}\n//\t\telse {\n//\t\t\tSystem.err.println(\"WiiReaderPanel.setGesture() Displaying: null gesture\");\n//\t\t}\n\t\tthis.paintComponent(this.getGraphics());\n\t}", "comment": "sets the gesture to be drawn by this panel"}, {"path": "./Dataset/funcom_test/19510270.txt", "code": "public void testProductTypeLeftRightSpecialization() {\n\t\ttry {\n\t\t\tfinal ProductType pType = ff.makeProductType(S, T);\n\t\t\tspec.put(S, U);\n\t\t\tspec.put(T, V);\n\t\t\tfinal Type specialType = pType.specialize(spec);\n\t\t\tassertEquals(ff.makeProductType(U, V), specialType);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tfail(\"Should not have raised an exception\");\n\t\t}\n\t}", "comment": "ensures that given types appearing as left and right members of a product"}, {"path": "./Dataset/funcom_test/1189718.txt", "code": "public int setString(Buffer buff, int offset, String newval) {\n      String oldval = buff.getString(offset);\n      Block blk = buff.block();\n      if (isTempBlock(blk))\n         return -1;\n      else\n         return new SetStringRecord(txnum, blk, offset, oldval).writeToLog();\n   }", "comment": "writes a setstring record to the log and returns its lsn"}, {"path": "./Dataset/funcom_test/19632385.txt", "code": "protected void addGranularDepthPropertyDescriptor(Object object) {\n\t\titemPropertyDescriptors.add\n\t\t\t(createItemPropertyDescriptor\n\t\t\t\t(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),\n\t\t\t\t getResourceLocator(),\n\t\t\t\t getString(\"_UI_ProcessorOutput_granularDepth_feature\"),\n\t\t\t\t getString(\"_UI_PropertyDescriptor_description\", \"_UI_ProcessorOutput_granularDepth_feature\", \"_UI_ProcessorOutput_type\"),\n\t\t\t\t CanvasPackage.Literals.PROCESSOR_OUTPUT__GRANULAR_DEPTH,\n\t\t\t\t true,\n\t\t\t\t false,\n\t\t\t\t false,\n\t\t\t\t ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,\n\t\t\t\t null,\n\t\t\t\t null));\n\t}", "comment": "this adds a property descriptor for the granular depth feature"}, {"path": "./Dataset/funcom_test/38756046.txt", "code": "public String getCurrentActionLog() {\n        String res =\"\";\n        for(LogEntry l : this.currentLog){\n            if (l.getAttackAction()==this.current.get(this.currentAction)){\n                res+=l.toShortString()+\" | \";\n            }\n        }\n        return res;\n    }", "comment": "get a string representation of the log entry or entries caused by"}, {"path": "./Dataset/funcom_test/16777985.txt", "code": "public double stdDev(double average) {\n\t\tif (this.values == null) return Double.NaN;\n\n\t\tdouble sumsqdev = 0.0;\n\t\tint count = 0;\n\t\tfor (double value : this.values) {\n\t\t\tif (!Double.isNaN(value)) {\n\t\t\t\tfinal double dev = (value - average);\n\t\t\t\tsumsqdev += (dev * dev);\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\n\t\tif (count == 0) return Double.NaN;\n\t\tif (count == 1) return 0.0;\n\t\treturn Math.sqrt(sumsqdev / (count - 1));\n\t}", "comment": "calculates the standard deviation of the values in this time series"}, {"path": "./Dataset/funcom_test/1810906.txt", "code": "public void insertData(int offset, String arg) {\n    try {\n      XMLParserImpl.insertData(this.getJsObject(), offset, arg);\n    } catch (JavaScriptException e) {\n      throw new DOMNodeException(DOMNodeException.INVALID_MODIFICATION_ERR, e, this);\n    }\n  }", "comment": "this function delegates to the native method code insert data code in"}, {"path": "./Dataset/funcom_test/10893655.txt", "code": "public ByteBuffer getByteBuffer() {\n        if (byteBuffer == null || byteBuffer.array() != buff) {\n            byteBuffer = ByteBuffer.wrap(buff, start, end - start);\n        } else {\n            byteBuffer.position(start);\n            byteBuffer.limit(end);\n        }\n        return byteBuffer;\n    }", "comment": "return a byte buffer"}, {"path": "./Dataset/funcom_test/22622374.txt", "code": "public List getDcsStatusOptions() {\n\t\tList statusOptions = new ArrayList();\n\t\ttry {\n\t\t\tstatusOptions = dcsDataFramework.getSchemaHelper().getEnumerationValues(\"dcsStatusType\", false);\n\t\t} catch (Exception e) {\n\t\t\tprtln(\"getStatusOptions error: \" + e.getMessage());\n\t\t}\n\t\t// prtln (\"getStatusOptions returning \" + statusOptions);\n\t\treturn statusOptions;\n\t}", "comment": "gets the dcs status options attribute of the dcs data manager object"}, {"path": "./Dataset/funcom_test/45704203.txt", "code": "private JTable getStartsTable() {\n\t\tif (startsTable == null) {\n\t\t\tstartsTable = new JTable();\n\t\t\tstartsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n\t\t\tstartsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n\t\t\tstartsTable.setShowGrid(true);\n//\t\t\tAsk to be notified of selection changes.\n\t\t\tstartsTable.getSelectionModel().addListSelectionListener(new TableSelectionListener());\n\t\t}\n\t\treturn startsTable;\n\t}", "comment": "this method initializes j starts table"}, {"path": "./Dataset/funcom_test/46999723.txt", "code": "private String deriveDivision(String exp, String vari) {\n        return (makeDivision(makeSubtraction(makeProduct(arg2(exp), derive(arg1(exp), vari)),\n                                             makeProduct(arg1(exp), derive(arg2(exp), vari))), makePower(arg2(exp),\n                                                                                                         \"2\")));\n    }", "comment": "derives the prefix expression i arg1 arg2 i"}, {"path": "./Dataset/funcom_test/3725313.txt", "code": "public GetQueueConfigParamsResponse getQueueConfigParams(GetQueueConfigParams request) throws RemoteException, QueuingFaultType {\n\t\tQueuingResource resource = this.getResource();\n\t\tGetQueueConfigParamsResponse response = new GetQueueConfigParamsResponse(resource.getConfig());\n\t\tlogger.debug(\"ready to invoke test \" + resource.getConfig().getCommunityGisHandle());\n\t\treturn response;\n\t}", "comment": "get queue configuration information"}, {"path": "./Dataset/funcom_test/22325768.txt", "code": "protected void reportTaskDone(UniqueID taskID, String fileName) {\n        log\n                .debug(\"Running BrokerConnection.reportTaskDone(taskID, fileName)..\");\n        UniqueID resultFileID = taskDispenser.taskDone(taskID, userID);\n        registerFile(resultFileID, fileName);\n    }", "comment": "implementation of the done node command"}, {"path": "./Dataset/funcom_test/15689897.txt", "code": "public List getAll(Object key) {\n        Object value = mMap.get(key);\n        if (value instanceof List) {\n            return ((List)value);\n        }\n        else {\n            List list = new ArrayList();\n            if (value != null || mMap.containsKey(key)) {\n                list.add(value);\n            }\n            mMap.put(key, list);\n            return list;\n        }\n    }", "comment": "returns all the values associated with the given key"}, {"path": "./Dataset/funcom_test/18421751.txt", "code": "private JXStatusBar getJXStatusBar() {\n    \tif (JXStatusBar == null) {\n    \t\tJXStatusBar = new JXStatusBar();\n    \t\tJXStatusBar.setBounds(12, 414, 536, 24);\n    \t\tJXStatusBar.setText(\"hallo\");\n    \t}\n    \treturn JXStatusBar;\n    }", "comment": "this method initializes jxstatus bar"}, {"path": "./Dataset/funcom_test/25650933.txt", "code": "protected String getManifestAttributeValue(Attributes.Name attributeName) {\n        try {\n            String value = attributes.getValue(attributeName);\n            return value != null ? value : \"undefined\";\n        } catch (NullPointerException e) {\n            return \"undefined\";\n        } catch (IllegalArgumentException e) {\n            logger.error(\"Invalid attribute name when reading jar manifest for reading version information: \" + e.getMessage());\n            return \"undefined\";\n        }\n    }", "comment": "gets the value of an attribute of the manifest"}, {"path": "./Dataset/funcom_test/43302305.txt", "code": "protected boolean isReadyForInput(Component c) {\n        if (eventMode == EM_AWT)\n            return c.isShowing();\n        Window w = AWT.getWindow(c);\n        if (w == null) {\n            throw new ActionFailedException(\"Component '\" + toString(c)\n                                            + \"' has no Window ancestor\");\n        }\n        return c.isShowing()\n            && tracker.isWindowReady(w);\n    }", "comment": "is the given component ready for robot input"}, {"path": "./Dataset/funcom_test/29852467.txt", "code": "public TableReference getTable() {\n    FieldNameList list = alias.getFieldNameList();\n    if (list != null) {\n      if (fieldNameListTableReference == null) {\n\tfieldNameListTableReference = new FieldNameListTableReference(getTokenReference(), list);\n      }\n      return fieldNameListTableReference;\n    }\n    return table;\n  }", "comment": "returns a table name from an alias name or null"}]